--- ./kernel/sched/fair.c	2021-07-20 12:39:12.035461944 -0700
+++ ./kernel/sched/fair.c	2021-07-20 12:48:06.479906255 -0700
@@ -6568,6 +6568,56 @@
 	return !task_fits_capacity(p, min_cap);
 }
 
+#ifdef CONFIG_CACULE_SCHED
+static int
+find_least_IS_cpu(struct task_struct *p)
+{
+    struct cfs_rq *cfs_rq;
+    unsigned int max_IS = 0;
+    unsigned int IS, IS_c, IS_h;
+    struct sched_entity *curr_se;
+    struct cacule_node *cn, *head;
+    int cpu_i;
+    int new_cpu = -1;
+
+    for_each_online_cpu(cpu_i) {
+        if (!cpumask_test_cpu(cpu_i, p->cpus_ptr))
+            continue;
+
+        cn = NULL;
+        cfs_rq = &cpu_rq(cpu_i)->cfs;
+
+        curr_se = cfs_rq->curr;
+        head = cfs_rq->head;
+ 
+        if (!curr_se && head)
+            cn = head;
+        else if (curr_se && !head)
+            cn = &curr_se->cacule_node;
+        else if (curr_se && head) {
+            IS_c = calc_interactivity(sched_clock(), &curr_se->cacule_node);
+            IS_h = calc_interactivity(sched_clock(), head);
+
+            IS = IS_c > IS_h? IS_c : IS_h;
+            goto compare;
+        }
+
+        if (!cn)
+            return cpu_i;
+
+        IS = calc_interactivity(sched_clock(), cn);
+
+compare:
+        if (IS > max_IS) {
+            max_IS = IS;
+            new_cpu = cpu_i;
+        }
+    }
+
+    return new_cpu;
+}
+#endif
+
 /*
  * select_task_rq_fair: Select target runqueue for the waking task in domains
  * that have the 'sd_flag' flag set. In practice, this is SD_BALANCE_WAKE,
