--- ./mm/oom_kill.c	2021-07-12 17:50:51.595514434 -0700
+++ ./mm/oom_kill.c	2021-07-12 18:44:15.043196480 -0700
@@ -1142,49 +1142,49 @@
 
 SYSCALL_DEFINE2(process_reap, int, pidfd, unsigned int, flags)
 {
-	struct pid *pid;
-	struct task_struct *task;
-	struct mm_struct *mm = NULL;
-	unsigned int f_flags;
-	long ret = 0;
-
-	if (flags != 0)
-		return -EINVAL;
-
-	pid = pidfd_get_pid(pidfd, &f_flags);
-	if (IS_ERR(pid))
-		return PTR_ERR(pid);
-
-	task = get_pid_task(pid, PIDTYPE_PID);
-	if (!task) {
-		ret = -ESRCH;
-		goto put_pid;
-	}
-
-	/*
-	 * If the task is dying and in the process of releasing its memory
-	 * then get its mm.
-	 */
-	task_lock(task);
-	if (task_will_free_mem(task) && (task->flags & PF_KTHREAD) == 0) {
-		mm = task->mm;
-		mmget(mm);
-	}
-	task_unlock(task);
-	if (!mm) {
-		ret = -EINVAL;
-		goto put_task;
-	}
-
-	mmap_read_lock(mm);
-	if (!__oom_reap_task_mm(mm))
-		ret = -EAGAIN;
-	mmap_read_unlock(mm);
+   struct pid *pid;
+   struct task_struct *task;
+   struct mm_struct *mm = NULL;
+   unsigned int f_flags;
+   long ret = 0;
+
+   if (flags != 0)
+       return -EINVAL;
+
+   pid = pidfd_get_pid(pidfd, &f_flags);
+   if (IS_ERR(pid))
+       return PTR_ERR(pid);
+
+   task = get_pid_task(pid, PIDTYPE_PID);
+   if (!task) {
+       ret = -ESRCH;
+       goto put_pid;
+   }
+
+   /*
+    * If the task is dying and in the process of releasing its memory
+    * then get its mm.
+    */
+   task_lock(task);
+   if (task_will_free_mem(task) && (task->flags & PF_KTHREAD) == 0) {
+       mm = task->mm;
+       mmget(mm);
+   }
+   task_unlock(task);
+   if (!mm) {
+       ret = -EINVAL;
+       goto put_task;
+   }
+
+   mmap_read_lock(mm);
+   if (!__oom_reap_task_mm(mm))
+       ret = -EAGAIN;
+   mmap_read_unlock(mm);
 
-	mmput(mm);
+   mmput(mm);
 put_task:
-	put_task_struct(task);
+   put_task_struct(task);
 put_pid:
-	put_pid(pid);
-	return ret;
+   put_pid(pid);
+   return ret;
 }
