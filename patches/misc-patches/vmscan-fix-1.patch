--- ./mm/vmscan.c	2021-07-10 09:09:48.698593085 -0700
+++ ./mm/vmscan.c	2021-07-10 09:10:19.292078478 -0700
@@ -3030,6 +3030,34 @@
 			!(sc->may_deactivate & DEACTIVATE_ANON) &&
 			anon >> sc->priority;
 
+       /*
+       * Check the number of clean file pages to protect them from
+       * reclaiming if their amount is below the specified.
+       */
+       if (sysctl_clean_low_kbytes || sysctl_clean_min_kbytes) {
+            unsigned long reclaimable_file, dirty, clean;
+
+            reclaimable_file =
+                node_page_state(pgdat, NR_ACTIVE_FILE) +
+                node_page_state(pgdat, NR_INACTIVE_FILE) +
+                node_page_state(pgdat, NR_ISOLATED_FILE);
+            dirty = node_page_state(pgdat, NR_FILE_DIRTY);
+            /*
+            * node_page_state() sum can go out of sync since
+            * all the values are not read at once.
+            */
+            if (likely(reclaimable_file > dirty))
+                clean = (reclaimable_file - dirty) << (PAGE_SHIFT - 10);
+            else
+                clean = 0;
+
+            sc->clean_below_low = clean < sysctl_clean_low_kbytes;
+            sc->clean_below_min = clean < sysctl_clean_min_kbytes;
+        } else {
+            sc->clean_below_low = false;
+            sc->clean_below_min = false;
+        }
+
 #if defined(CONFIG_UNEVICTABLE_FILE)
 		/*
 		 * node_page_state() sum can go out of sync since
