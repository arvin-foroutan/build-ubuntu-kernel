--- ./mm/vmscan.c	2021-07-10 09:35:23.325317008 -0700
+++ ./mm/vmscan.c	2021-07-10 09:39:33.203062922 -0700
@@ -5461,148 +5461,7 @@
 	nr_reclaimed = sc->nr_reclaimed;
 	nr_scanned = sc->nr_scanned;
 
-	/*
-	 * Determine the scan balance between anon and file LRUs.
-	 */
-	spin_lock_irq(&target_lruvec->lru_lock);
-	sc->anon_cost = target_lruvec->anon_cost;
-	sc->file_cost = target_lruvec->file_cost;
-	spin_unlock_irq(&target_lruvec->lru_lock);
-
-	/*
-	 * Target desirable inactive:active list ratios for the anon
-	 * and file LRU lists.
-	 */
-	if (!sc->force_deactivate) {
-		unsigned long refaults;
-
-		refaults = lruvec_page_state(target_lruvec,
-				WORKINGSET_ACTIVATE_ANON);
-		if (refaults != target_lruvec->refaults[0] ||
-			inactive_is_low(target_lruvec, LRU_INACTIVE_ANON))
-			sc->may_deactivate |= DEACTIVATE_ANON;
-		else
-			sc->may_deactivate &= ~DEACTIVATE_ANON;
-
-		/*
-		 * When refaults are being observed, it means a new
-		 * workingset is being established. Deactivate to get
-		 * rid of any stale active pages quickly.
-		 */
-		refaults = lruvec_page_state(target_lruvec,
-				WORKINGSET_ACTIVATE_FILE);
-		if (refaults != target_lruvec->refaults[1] ||
-		    inactive_is_low(target_lruvec, LRU_INACTIVE_FILE))
-			sc->may_deactivate |= DEACTIVATE_FILE;
-		else
-			sc->may_deactivate &= ~DEACTIVATE_FILE;
-	} else
-		sc->may_deactivate = DEACTIVATE_ANON | DEACTIVATE_FILE;
-
-	/*
-	 * If we have plenty of inactive file pages that aren't
-	 * thrashing, try to reclaim those first before touching
-	 * anonymous pages.
-	 */
-	file = lruvec_page_state(target_lruvec, NR_INACTIVE_FILE);
-	if (file >> sc->priority && !(sc->may_deactivate & DEACTIVATE_FILE))
-		sc->cache_trim_mode = 1;
-	else
-		sc->cache_trim_mode = 0;
-
-	/*
-	 * Prevent the reclaimer from falling into the cache trap: as
-	 * cache pages start out inactive, every cache fault will tip
-	 * the scan balance towards the file LRU.  And as the file LRU
-	 * shrinks, so does the window for rotation from references.
-	 * This means we have a runaway feedback loop where a tiny
-	 * thrashing file LRU becomes infinitely more attractive than
-	 * anon pages.  Try to detect this based on file LRU size.
-	 */
-	if (!cgroup_reclaim(sc)) {
-		unsigned long total_high_wmark = 0;
-		unsigned long free, anon;
-#if defined(CONFIG_UNEVICTABLE_FILE)
-		unsigned long reclaimable_file, clean_file, dirty_file;
-#endif
-		int z;
-
-		free = sum_zone_node_page_state(pgdat->node_id, NR_FREE_PAGES);
-		file = node_page_state(pgdat, NR_ACTIVE_FILE) +
-			   node_page_state(pgdat, NR_INACTIVE_FILE);
-#if defined(CONFIG_UNEVICTABLE_FILE)
-		reclaimable_file = file + node_page_state(pgdat, NR_ISOLATED_FILE);
-		dirty_file = node_page_state(pgdat, NR_FILE_DIRTY);
-#endif
-
-		for (z = 0; z < MAX_NR_ZONES; z++) {
-			struct zone *zone = &pgdat->node_zones[z];
-			if (!managed_zone(zone))
-				continue;
-
-			total_high_wmark += high_wmark_pages(zone);
-		}
-
-		/*
-		 * Consider anon: if that's low too, this isn't a
-		 * runaway file reclaim problem, but rather just
-		 * extreme pressure. Reclaim as per usual then.
-		 */
-		anon = node_page_state(pgdat, NR_INACTIVE_ANON);
-
-		sc->file_is_tiny =
-			file + free <= total_high_wmark &&
-			!(sc->may_deactivate & DEACTIVATE_ANON) &&
-			anon >> sc->priority;
-
-       /*
-       * Check the number of clean file pages to protect them from
-       * reclaiming if their amount is below the specified.
-       */
-       if (sysctl_clean_low_kbytes || sysctl_clean_min_kbytes) {
-            unsigned long reclaimable_file, dirty, clean;
-
-            reclaimable_file =
-                node_page_state(pgdat, NR_ACTIVE_FILE) +
-                node_page_state(pgdat, NR_INACTIVE_FILE) +
-                node_page_state(pgdat, NR_ISOLATED_FILE);
-            dirty = node_page_state(pgdat, NR_FILE_DIRTY);
-            /*
-            * node_page_state() sum can go out of sync since
-            * all the values are not read at once.
-            */
-            if (likely(reclaimable_file > dirty))
-                clean = (reclaimable_file - dirty) << (PAGE_SHIFT - 10);
-            else
-                clean = 0;
-
-            sc->clean_below_low = clean < sysctl_clean_low_kbytes;
-            sc->clean_below_min = clean < sysctl_clean_min_kbytes;
-        } else {
-            sc->clean_below_low = false;
-            sc->clean_below_min = false;
-        }
-
-#if defined(CONFIG_UNEVICTABLE_FILE)
-		/*
-		 * node_page_state() sum can go out of sync since
-		 * all the values are not read at once
-		 */
-		if (unlikely(reclaimable_file < dirty_file))
-			/*
-			 * in this case assume the system does not have
-			 * clean file pages anymore
-			 */
-			clean_file = 0;
-		else
-			clean_file = reclaimable_file - dirty_file;
-
-		sc->file_is_low = K(clean_file) < sysctl_unevictable_file_kbytes_low &&
-			          K(clean_file) > sysctl_unevictable_file_kbytes_min;
-
-		sc->file_is_min = K(clean_file) <= sysctl_unevictable_file_kbytes_min;
-#endif
-	}
+    prepare_scan_count(pgdat, sc);
 
 	shrink_node_memcgs(pgdat, sc);
 
