From 814502c9231e5c92447f3c60d74a6461b28992f7 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 21 Jan 2022 12:36:10 +0100
Subject: [PATCH 68/75] Revert "bfq: Update cgroup information before merging
 bio"

This reverts commit c1faf3b0a937d0d55c4168e7229667a06a9f22b3.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-cgroup.c  | 40 ++++++++++++++++++----------------------
 block/bfq-iosched.c | 11 ++---------
 2 files changed, 20 insertions(+), 31 deletions(-)

diff --git a/block/bfq-cgroup.c b/block/bfq-cgroup.c
index 5158d2e..dbb2dce 100644
--- a/block/bfq-cgroup.c
+++ b/block/bfq-cgroup.c
@@ -745,34 +745,30 @@ static struct bfq_group *__bfq_bic_change_cgroup(struct bfq_data *bfqd,
 	}
 
 	if (sync_bfqq) {
-		struct bfq_queue *orig_bfqq = sync_bfqq;
-
-		/* Traverse the merge chain to bfqq we will be using */
-		while (sync_bfqq->new_bfqq)
-			sync_bfqq = sync_bfqq->new_bfqq;
-		/*
-		 * Target bfqq got moved to a different cgroup or this process
-		 * started submitting bios for different cgroup?
-		 */
-		if (sync_bfqq->entity.sched_data != &bfqg->sched_data) {
+		entity = &sync_bfqq->entity;
+		if (entity->sched_data != &bfqg->sched_data) {
 			/*
 			 * Was the queue we use merged to a different queue?
-			 * Detach process from the queue as the merge is not
-			 * valid anymore. We cannot easily just cancel the
-			 * merge (by clearing new_bfqq) as there may be other
-			 * processes using this queue and holding refs to all
-			 * queues below sync_bfqq->new_bfqq. Similarly if the
-			 * merge already happened, we need to detach from bfqq
-			 * now so that we cannot merge bio to a request from
-			 * the old cgroup.
+			 * Detach process from the queue as merge need not be
+			 * valid anymore. We cannot easily cancel the merge as
+			 * there may be other processes scheduled to this
+			 * queue.
 			 */
-			if (orig_bfqq != sync_bfqq || bfq_bfqq_coop(sync_bfqq)) {
-				bfq_put_cooperator(orig_bfqq);
-				bfq_release_process_ref(bfqd, orig_bfqq);
+			if (sync_bfqq->new_bfqq) {
+				bfq_put_cooperator(sync_bfqq);
+				bfq_release_process_ref(bfqd, sync_bfqq);
 				bic_set_bfqq(bic, NULL, 1);
 				return bfqg;
 			}
-			/* We are the only user of this bfqq, just move it */
+			/*
+			 * Moving bfqq that is shared with another process?
+			 * Split the queues at the nearest occasion as the
+			 * processes can be in different cgroups now.
+			 */
+			if (bfq_bfqq_coop(sync_bfqq)) {
+				bic->stably_merged = false;
+				bfq_mark_bfqq_split_coop(sync_bfqq);
+			}
 			bfq_bfqq_move(bfqd, sync_bfqq, bfqg);
 		}
 	}
diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index b778192..338a8cd 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -2464,17 +2464,10 @@ static bool bfq_bio_merge(struct request_queue *q, struct bio *bio,
 
 	spin_lock_irq(&bfqd->lock);
 
-	if (bic) {
-		/*
-		 * Make sure cgroup info is uptodate for current process before
-		 * considering the merge.
-		 */
-		bfq_bic_update_cgroup(bic, bio);
-
+	if (bic)
 		bfqd->bio_bfqq = bic_to_bfqq(bic, op_is_sync(bio->bi_opf));
-	} else {
+	else
 		bfqd->bio_bfqq = NULL;
-	}
 	bfqd->bio_bic = bic;
 
 	ret = blk_mq_sched_try_merge(q, bio, nr_segs, &free);
-- 
2.34.1.75.gabe6bb3905

