From 00d6cd83a48327eec2810a80a203935c76e611e3 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Sun, 24 Oct 2021 15:10:02 +0200
Subject: [PATCH 4/4] cacule-5.15: define yield_mark and yield_unmark

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/fair.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 8024f529f..2234b8c9e 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -57,6 +57,15 @@ unsigned int __read_mostly starve_divisor		= 3000000; // 3ms
 unsigned int sysctl_sched_latency			= 6000000ULL;
 static unsigned int normalized_sysctl_sched_latency	= 6000000ULL;
 
+/*
+ * When tasks asks for yield, alter its vruntime
+ * to have high value, so the scheduler won't
+ * pick it if there are other tasks to run.
+ * yield mark get erased after picking another task.
+ */
+#define YIELD_MARK(se)		((se)->vruntime |= 0x8000000000000000ULL)
+#define YIELD_UNMARK(se)	((se)->vruntime &= 0x7FFFFFFFFFFFFFFFULL)
+
 /*
  * The initial- and re-scaling of tunables is configurable
  *
@@ -7740,6 +7749,9 @@ pick_next_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf
 
 	p = task_of(se);
 
+	if (prev)
+		YIELD_UNMARK(&prev->se);
+
 done: __maybe_unused;
 #ifdef CONFIG_CACULE_SCHED
 	if (prev)
@@ -7835,6 +7847,8 @@ static void yield_task_fair(struct rq *rq)
 	struct sched_entity *se = &curr->se;
 #endif
 
+	YIELD_MARK(&curr->se);
+
 	/*
 	 * Are we the only task in the tree?
 	 */
-- 
2.34.1.75.gabe6bb3905

