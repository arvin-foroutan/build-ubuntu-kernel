From da39bebc950b8aa731c4bbfde46bf04e11fb6151 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 3 Feb 2022 10:54:35 +0100
Subject: [PATCH 18/26] Revert "btrfs: use single variable to track return
 value at btrfs_log_inode()"

This reverts commit c628bda6c1f7d6e97937663ae11924bd8032a9d5.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 fs/btrfs/tree-log.c | 52 ++++++++++++++++++++++++++-------------------
 1 file changed, 30 insertions(+), 22 deletions(-)

diff --git a/fs/btrfs/tree-log.c b/fs/btrfs/tree-log.c
index e73a26414..9c8b5a5a8 100644
--- a/fs/btrfs/tree-log.c
+++ b/fs/btrfs/tree-log.c
@@ -5655,7 +5655,8 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 	struct btrfs_key min_key;
 	struct btrfs_key max_key;
 	struct btrfs_root *log = inode->root->log_root;
-	int ret;
+	int err = 0;
+	int ret = 0;
 	bool fast_search = false;
 	u64 ino = btrfs_ino(inode);
 	struct extent_map_tree *em_tree = &inode->extent_tree;
@@ -5698,8 +5699,8 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 	 * and figure out which index ranges have to be logged.
 	 */
 	if (S_ISDIR(inode->vfs_inode.i_mode)) {
-		ret = btrfs_commit_inode_delayed_items(trans, inode);
-		if (ret)
+		err = btrfs_commit_inode_delayed_items(trans, inode);
+		if (err)
 			goto out;
 	}
 
@@ -5720,10 +5721,11 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 	 * the inode was previously logged in this transaction.
 	 */
 	ret = inode_logged(trans, inode, path);
-	if (ret < 0)
+	if (ret < 0) {
+		err = ret;
 		goto out;
+	}
 	ctx->logged_before = (ret == 1);
-	ret = 0;
 
 	/*
 	 * This is for cases where logging a directory could result in losing a
@@ -5736,7 +5738,7 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 	    inode_only == LOG_INODE_ALL &&
 	    inode->last_unlink_trans >= trans->transid) {
 		btrfs_set_log_full_commit(trans);
-		ret = 1;
+		err = 1;
 		goto out_unlock;
 	}
 
@@ -5768,8 +5770,8 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 			 * (zeroes), as if an expanding truncate happened,
 			 * instead of getting a file of 4Kb only.
 			 */
-			ret = logged_inode_size(log, inode, path, &logged_isize);
-			if (ret)
+			err = logged_inode_size(log, inode, path, &logged_isize);
+			if (err)
 				goto out_unlock;
 		}
 		if (test_bit(BTRFS_INODE_NEEDS_FULL_SYNC,
@@ -5805,35 +5807,37 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 		}
 
 	}
-	if (ret)
+	if (ret) {
+		err = ret;
 		goto out_unlock;
+	}
 
-	ret = copy_inode_items_to_log(trans, inode, &min_key, &max_key,
+	err = copy_inode_items_to_log(trans, inode, &min_key, &max_key,
 				      path, dst_path, logged_isize,
 				      recursive_logging, inode_only, ctx,
 				      &need_log_inode_item);
-	if (ret)
+	if (err)
 		goto out_unlock;
 
 	btrfs_release_path(path);
 	btrfs_release_path(dst_path);
-	ret = btrfs_log_all_xattrs(trans, inode, path, dst_path);
-	if (ret)
+	err = btrfs_log_all_xattrs(trans, inode, path, dst_path);
+	if (err)
 		goto out_unlock;
 	xattrs_logged = true;
 	if (max_key.type >= BTRFS_EXTENT_DATA_KEY && !fast_search) {
 		btrfs_release_path(path);
 		btrfs_release_path(dst_path);
-		ret = btrfs_log_holes(trans, inode, path);
-		if (ret)
+		err = btrfs_log_holes(trans, inode, path);
+		if (err)
 			goto out_unlock;
 	}
 log_extents:
 	btrfs_release_path(path);
 	btrfs_release_path(dst_path);
 	if (need_log_inode_item) {
-		ret = log_inode_item(trans, log, dst_path, inode, inode_item_dropped);
-		if (ret)
+		err = log_inode_item(trans, log, dst_path, inode, inode_item_dropped);
+		if (err)
 			goto out_unlock;
 		/*
 		 * If we are doing a fast fsync and the inode was logged before
@@ -5844,16 +5848,18 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 		 * BTRFS_INODE_COPY_EVERYTHING set.
 		 */
 		if (!xattrs_logged && inode->logged_trans < trans->transid) {
-			ret = btrfs_log_all_xattrs(trans, inode, path, dst_path);
-			if (ret)
+			err = btrfs_log_all_xattrs(trans, inode, path, dst_path);
+			if (err)
 				goto out_unlock;
 			btrfs_release_path(path);
 		}
 	}
 	if (fast_search) {
 		ret = btrfs_log_changed_extents(trans, inode, dst_path, ctx);
-		if (ret)
+		if (ret) {
+			err = ret;
 			goto out_unlock;
+		}
 	} else if (inode_only == LOG_INODE_ALL) {
 		struct extent_map *em, *n;
 
@@ -5865,8 +5871,10 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 
 	if (inode_only == LOG_INODE_ALL && S_ISDIR(inode->vfs_inode.i_mode)) {
 		ret = log_directory_changes(trans, inode, path, dst_path, ctx);
-		if (ret)
+		if (ret) {
+			err = ret;
 			goto out_unlock;
+		}
 	}
 
 	spin_lock(&inode->lock);
@@ -5914,7 +5922,7 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 	if (recursive_logging)
 		ctx->logged_before = orig_logged_before;
 
-	return ret;
+	return err;
 }
 
 /*
-- 
2.35.1.4.g5d01301f2b

