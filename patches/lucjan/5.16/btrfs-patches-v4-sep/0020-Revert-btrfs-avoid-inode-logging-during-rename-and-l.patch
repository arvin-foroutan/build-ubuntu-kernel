From b98a975e120e931082f0279ff472f706752b9775 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 3 Feb 2022 10:54:37 +0100
Subject: [PATCH 20/23] Revert "btrfs: avoid inode logging during rename and
 link when possible"

This reverts commit 2aa648c67ac92a7e93c459b2f01a78e2453ec010.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 fs/btrfs/tree-log.c | 245 ++++++++++++--------------------------------
 fs/btrfs/tree-log.h |   3 -
 2 files changed, 65 insertions(+), 183 deletions(-)

diff --git a/fs/btrfs/tree-log.c b/fs/btrfs/tree-log.c
index 9c8b5a5a8..2545467c5 100644
--- a/fs/btrfs/tree-log.c
+++ b/fs/btrfs/tree-log.c
@@ -3454,121 +3454,35 @@ int btrfs_free_log_root_tree(struct btrfs_trans_handle *trans,
 }
 
 /*
- * Check if an inode was logged in the current transaction. This correctly deals
- * with the case where the inode was logged but has a logged_trans of 0, which
- * happens if the inode is evicted and loaded again, as logged_trans is an in
- * memory only field (not persisted).
- *
- * Returns 1 if the inode was logged before in the transaction, 0 if it was not,
- * and < 0 on error.
+ * Check if an inode was logged in the current transaction. This may often
+ * return some false positives, because logged_trans is an in memory only field,
+ * not persisted anywhere. This is meant to be used in contexts where a false
+ * positive has no functional consequences.
  */
-static int inode_logged(struct btrfs_trans_handle *trans,
-			struct btrfs_inode *inode,
-			struct btrfs_path *path_in)
+static bool inode_logged(struct btrfs_trans_handle *trans,
+			 struct btrfs_inode *inode)
 {
-	struct btrfs_path *path = path_in;
-	struct btrfs_key key;
-	int ret;
-
 	if (inode->logged_trans == trans->transid)
-		return 1;
-
-	/*
-	 * If logged_trans is not 0, then we know the inode logged was not logged
-	 * in this transaction, so we can return false right away.
-	 */
-	if (inode->logged_trans > 0)
-		return 0;
-
-	/*
-	 * If no log tree was created for this root in this transaction, then
-	 * the inode can not have been logged in this transaction. In that case
-	 * set logged_trans to anything greater than 0 and less than the current
-	 * transaction's ID, to avoid the search below in a future call in case
-	 * a log tree gets created after this.
-	 */
-	if (!test_bit(BTRFS_ROOT_HAS_LOG_TREE, &inode->root->state)) {
-		inode->logged_trans = trans->transid - 1;
-		return 0;
-	}
-
-	/*
-	 * We have a log tree and the inode's logged_trans is 0. We can't tell
-	 * for sure if the inode was logged before in this transaction by looking
-	 * only at logged_trans. We could be pessimistic and assume it was, but
-	 * that can lead to unnecessarily logging an inode during rename and link
-	 * operations, and then further updating the log in followup rename and
-	 * link operations, specially if it's a directory, which adds latency
-	 * visible to applications doing a series of rename or link operations.
-	 *
-	 * A logged_trans of 0 here can mean several things:
-	 *
-	 * 1) The inode was never logged since the filesystem was mounted, and may
-	 *    or may have not been evicted and loaded again;
-	 *
-	 * 2) The inode was logged in a previous transaction, then evicted and
-	 *    then loaded again;
-	 *
-	 * 3) The inode was logged in the current transaction, then evicted and
-	 *    then loaded again.
-	 *
-	 * For cases 1) and 2) we don't want to return true, but we need to detect
-	 * case 3) and return true. So we do a search in the log root for the inode
-	 * item.
-	 */
-	key.objectid = btrfs_ino(inode);
-	key.type = BTRFS_INODE_ITEM_KEY;
-	key.offset = 0;
+		return true;
 
-	if (!path) {
-		path = btrfs_alloc_path();
-		if (!path)
-			return -ENOMEM;
-	}
-
-	ret = btrfs_search_slot(NULL, inode->root->log_root, &key, path, 0, 0);
-
-	if (path_in)
-		btrfs_release_path(path);
-	else
-		btrfs_free_path(path);
-
-	/*
-	 * Logging an inode always results in logging its inode item. So if we
-	 * did not find the item we know the inode was not logged for sure.
-	 */
-	if (ret < 0) {
-		return ret;
-	} else if (ret > 0) {
-		/*
-		 * Set logged_trans to a value greater than 0 and less then the
-		 * current transaction to avoid doing the search in future calls.
-		 */
-		inode->logged_trans = trans->transid - 1;
-		return 0;
-	}
-
-	/*
-	 * The inode was previously logged and then evicted, set logged_trans to
-	 * the current transacion's ID, to avoid future tree searches as long as
-	 * the inode is not evicted again.
-	 */
-	inode->logged_trans = trans->transid;
+	if (!test_bit(BTRFS_ROOT_HAS_LOG_TREE, &inode->root->state))
+		return false;
 
 	/*
-	 * If it's a directory, then we must set last_dir_index_offset to the
-	 * maximum possible value, so that the next attempt to log the inode does
-	 * not skip checking if dir index keys found in modified subvolume tree
-	 * leaves have been logged before, otherwise it would result in attempts
-	 * to insert duplicate dir index keys in the log tree. This must be done
-	 * because last_dir_index_offset is an in-memory only field, not persisted
-	 * in the inode item or any other on-disk structure, so its value is lost
-	 * once the inode is evicted.
+	 * The inode's logged_trans is always 0 when we load it (because it is
+	 * not persisted in the inode item or elsewhere). So if it is 0, the
+	 * inode was last modified in the current transaction then the inode may
+	 * have been logged before in the current transaction, then evicted and
+	 * loaded again in the current transaction - or may have never been logged
+	 * in the current transaction, but since we can not be sure, we have to
+	 * assume it was, otherwise our callers can leave an inconsistent log.
 	 */
-	if (S_ISDIR(inode->vfs_inode.i_mode))
-		inode->last_dir_index_offset = (u64)-1;
+	if (inode->logged_trans == 0 &&
+	    inode->last_trans == trans->transid &&
+	    !test_bit(BTRFS_FS_LOG_RECOVERING, &trans->fs_info->flags))
+		return true;
 
-	return 1;
+	return false;
 }
 
 /*
@@ -3633,13 +3547,8 @@ void btrfs_del_dir_entries_in_log(struct btrfs_trans_handle *trans,
 	struct btrfs_path *path;
 	int ret;
 
-	ret = inode_logged(trans, dir, NULL);
-	if (ret == 0)
-		return;
-	else if (ret < 0) {
-		btrfs_set_log_full_commit(trans);
+	if (!inode_logged(trans, dir))
 		return;
-	}
 
 	ret = join_running_log_trans(root);
 	if (ret)
@@ -3673,13 +3582,8 @@ void btrfs_del_inode_ref_in_log(struct btrfs_trans_handle *trans,
 	u64 index;
 	int ret;
 
-	ret = inode_logged(trans, inode, NULL);
-	if (ret == 0)
+	if (!inode_logged(trans, inode))
 		return;
-	else if (ret < 0) {
-		btrfs_set_log_full_commit(trans);
-		return;
-	}
 
 	ret = join_running_log_trans(root);
 	if (ret)
@@ -3811,6 +3715,7 @@ static int process_dir_items_leaf(struct btrfs_trans_handle *trans,
 	struct extent_buffer *src = path->nodes[0];
 	const int nritems = btrfs_header_nritems(src);
 	const u64 ino = btrfs_ino(inode);
+	const bool inode_logged_before = inode_logged(trans, inode);
 	bool last_found = false;
 	int batch_start = 0;
 	int batch_size = 0;
@@ -3886,16 +3791,14 @@ static int process_dir_items_leaf(struct btrfs_trans_handle *trans,
 				ctx->log_new_dentries = true;
 		}
 
-		if (!ctx->logged_before)
+		if (!inode_logged_before)
 			goto add_to_batch;
 
 		/*
 		 * If we were logged before and have logged dir items, we can skip
 		 * checking if any item with a key offset larger than the last one
 		 * we logged is in the log tree, saving time and avoiding adding
-		 * contention on the log tree. We can only rely on the value of
-		 * last_dir_index_offset when we know for sure that the inode was
-		 * previously logged in the current transaction.
+		 * contention on the log tree.
 		 */
 		if (key.offset > inode->last_dir_index_offset)
 			goto add_to_batch;
@@ -4138,6 +4041,21 @@ static noinline int log_directory_changes(struct btrfs_trans_handle *trans,
 	u64 max_key;
 	int ret;
 
+	/*
+	 * If this is the first time we are being logged in the current
+	 * transaction, or we were logged before but the inode was evicted and
+	 * reloaded later, in which case its logged_trans is 0, reset the value
+	 * of the last logged key offset. Note that we don't use the helper
+	 * function inode_logged() here - that is because the function returns
+	 * true after an inode eviction, assuming the worst case as it can not
+	 * know for sure if the inode was logged before. So we can not skip key
+	 * searches in the case the inode was evicted, because it may not have
+	 * been logged in this transaction and may have been logged in a past
+	 * transaction, so we need to reset the last dir index offset to (u64)-1.
+	 */
+	if (inode->logged_trans != trans->transid)
+		inode->last_dir_index_offset = (u64)-1;
+
 	min_key = BTRFS_DIR_START_INDEX;
 	max_key = 0;
 	ctx->last_dir_item_offset = inode->last_dir_index_offset;
@@ -4174,6 +4092,9 @@ static int drop_inode_items(struct btrfs_trans_handle *trans,
 	struct btrfs_key found_key;
 	int start_slot;
 
+	if (!inode_logged(trans, inode))
+		return 0;
+
 	key.objectid = btrfs_ino(inode);
 	key.type = max_key_type;
 	key.offset = (u64)-1;
@@ -4668,7 +4589,7 @@ static int log_one_extent(struct btrfs_trans_handle *trans,
 	 * are small, with a root at level 2 or 3 at most, due to their short
 	 * life span.
 	 */
-	if (ctx->logged_before) {
+	if (inode_logged(trans, inode)) {
 		drop_args.path = path;
 		drop_args.start = em->start;
 		drop_args.end = em->start + em->len;
@@ -5665,7 +5586,6 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 	bool xattrs_logged = false;
 	bool recursive_logging = false;
 	bool inode_item_dropped = true;
-	const bool orig_logged_before = ctx->logged_before;
 
 	path = btrfs_alloc_path();
 	if (!path)
@@ -5715,18 +5635,6 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 		mutex_lock(&inode->log_mutex);
 	}
 
-	/*
-	 * Before logging the inode item, cache the value returned by
-	 * inode_logged(), because after that we have the need to figure out if
-	 * the inode was previously logged in this transaction.
-	 */
-	ret = inode_logged(trans, inode, path);
-	if (ret < 0) {
-		err = ret;
-		goto out;
-	}
-	ctx->logged_before = (ret == 1);
-
 	/*
 	 * This is for cases where logging a directory could result in losing a
 	 * a file after replaying the log. For example, if we move a file from a
@@ -5752,11 +5660,9 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 		clear_bit(BTRFS_INODE_COPY_EVERYTHING, &inode->runtime_flags);
 		if (inode_only == LOG_INODE_EXISTS)
 			max_key_type = BTRFS_XATTR_ITEM_KEY;
-		if (ctx->logged_before)
-			ret = drop_inode_items(trans, log, path, inode,
-					       max_key_type);
+		ret = drop_inode_items(trans, log, path, inode, max_key_type);
 	} else {
-		if (inode_only == LOG_INODE_EXISTS && ctx->logged_before) {
+		if (inode_only == LOG_INODE_EXISTS && inode_logged(trans, inode)) {
 			/*
 			 * Make sure the new inode item we write to the log has
 			 * the same isize as the current one (if it exists).
@@ -5778,15 +5684,14 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 			     &inode->runtime_flags)) {
 			if (inode_only == LOG_INODE_EXISTS) {
 				max_key.type = BTRFS_XATTR_ITEM_KEY;
-				if (ctx->logged_before)
-					ret = drop_inode_items(trans, log, path,
-							       inode, max_key.type);
+				ret = drop_inode_items(trans, log, path, inode,
+						       max_key.type);
 			} else {
 				clear_bit(BTRFS_INODE_NEEDS_FULL_SYNC,
 					  &inode->runtime_flags);
 				clear_bit(BTRFS_INODE_COPY_EVERYTHING,
 					  &inode->runtime_flags);
-				if (ctx->logged_before)
+				if (inode_logged(trans, inode))
 					ret = truncate_inode_items(trans, log,
 								   inode, 0, 0);
 			}
@@ -5796,9 +5701,8 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 			if (inode_only == LOG_INODE_ALL)
 				fast_search = true;
 			max_key.type = BTRFS_XATTR_ITEM_KEY;
-			if (ctx->logged_before)
-				ret = drop_inode_items(trans, log, path, inode,
-						       max_key.type);
+			ret = drop_inode_items(trans, log, path, inode,
+					       max_key.type);
 		} else {
 			if (inode_only == LOG_INODE_ALL)
 				fast_search = true;
@@ -5918,10 +5822,6 @@ static int btrfs_log_inode(struct btrfs_trans_handle *trans,
 out:
 	btrfs_free_path(path);
 	btrfs_free_path(dst_path);
-
-	if (recursive_logging)
-		ctx->logged_before = orig_logged_before;
-
 	return err;
 }
 
@@ -6867,7 +6767,7 @@ void btrfs_log_new_name(struct btrfs_trans_handle *trans,
 	struct btrfs_root *root = inode->root;
 	struct btrfs_log_ctx ctx;
 	bool log_pinned = false;
-	int ret;
+	int ret = 0;
 
 	/*
 	 * this will force the logging code to walk the dentry chain
@@ -6880,24 +6780,9 @@ void btrfs_log_new_name(struct btrfs_trans_handle *trans,
 	 * if this inode hasn't been logged and directory we're renaming it
 	 * from hasn't been logged, we don't need to log it
 	 */
-	ret = inode_logged(trans, inode, NULL);
-	if (ret < 0) {
-		goto out;
-	} else if (ret == 0) {
-		if (!old_dir)
-			return;
-		/*
-		 * If the inode was not logged and we are doing a rename (old_dir is not
-		 * NULL), check if old_dir was logged - if it was not we can return and
-		 * do nothing.
-		 */
-		ret = inode_logged(trans, old_dir, NULL);
-		if (ret < 0)
-			goto out;
-		else if (ret == 0)
-			return;
-	}
-	ret = 0;
+	if (!inode_logged(trans, inode) &&
+	    (!old_dir || !inode_logged(trans, old_dir)))
+		return;
 
 	/*
 	 * If we are doing a rename (old_dir is not NULL) from a directory that
@@ -6957,15 +6842,15 @@ void btrfs_log_new_name(struct btrfs_trans_handle *trans,
 	 */
 	btrfs_log_inode_parent(trans, inode, parent, LOG_INODE_EXISTS, &ctx);
 out:
-	/*
-	 * If an error happened mark the log for a full commit because it's not
-	 * consistent and up to date or we couldn't find out if one of the
-	 * inodes was logged before in this transaction. Do it before unpinning
-	 * the log, to avoid any races with someone else trying to commit it.
-	 */
-	if (ret < 0)
-		btrfs_set_log_full_commit(trans);
-	if (log_pinned)
+	if (log_pinned) {
+		/*
+		 * If an error happened mark the log for a full commit because
+		 * it's not consistent and up to date. Do it before unpinning the
+		 * log, to avoid any races with someone else trying to commit it.
+		 */
+		if (ret < 0)
+			btrfs_set_log_full_commit(trans);
 		btrfs_end_log_trans(root);
+	}
 }
 
diff --git a/fs/btrfs/tree-log.h b/fs/btrfs/tree-log.h
index 1620f8170..f1acb7fa9 100644
--- a/fs/btrfs/tree-log.h
+++ b/fs/btrfs/tree-log.h
@@ -17,8 +17,6 @@ struct btrfs_log_ctx {
 	int log_transid;
 	bool log_new_dentries;
 	bool logging_new_name;
-	/* Indicate if the inode being logged was logged before. */
-	bool logged_before;
 	/* Tracks the last logged dir item/index key offset. */
 	u64 last_dir_item_offset;
 	struct inode *inode;
@@ -34,7 +32,6 @@ static inline void btrfs_init_log_ctx(struct btrfs_log_ctx *ctx,
 	ctx->log_transid = 0;
 	ctx->log_new_dentries = false;
 	ctx->logging_new_name = false;
-	ctx->logged_before = false;
 	ctx->inode = inode;
 	INIT_LIST_HEAD(&ctx->list);
 	INIT_LIST_HEAD(&ctx->ordered_extents);
-- 
2.35.1.4.g5d01301f2b

