From 625f8abdada652557846ba4da9deb4dda6b367df Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 3 Dec 2021 21:50:14 +0100
Subject: [PATCH 16/16] lrng-5.16: update to the latest git HEAD

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/lrng_chacha20.c      |  2 +-
 drivers/char/lrng/lrng_es_archrandom.c | 44 ++++++++++++++------------
 drivers/char/lrng/lrng_es_irq.c        |  2 ++
 drivers/char/lrng/lrng_health.c        |  4 +--
 drivers/char/lrng/lrng_internal.h      |  4 ++-
 drivers/char/lrng/lrng_kcapi.c         |  4 +--
 drivers/char/lrng/lrng_numa.c          |  1 +
 drivers/char/lrng/lrng_proc.c          |  1 +
 drivers/char/lrng/lrng_selftest.c      |  3 +-
 9 files changed, 37 insertions(+), 28 deletions(-)

diff --git a/drivers/char/lrng/lrng_chacha20.c b/drivers/char/lrng/lrng_chacha20.c
index 51f693c29..b5387bb33 100644
--- a/drivers/char/lrng/lrng_chacha20.c
+++ b/drivers/char/lrng/lrng_chacha20.c
@@ -29,7 +29,7 @@ struct chacha20_state {
  * kmalloc too early in the boot cycle. For subsequent allocation requests,
  * such as per-NUMA-node DRNG instances, kmalloc will be used.
  */
-struct chacha20_state chacha20 __latent_entropy;
+struct chacha20_state chacha20;
 
 /*
  * Update of the ChaCha20 state by either using an unused buffer part or by
diff --git a/drivers/char/lrng/lrng_es_archrandom.c b/drivers/char/lrng/lrng_es_archrandom.c
index 6965f9b8a..ecc74b93d 100644
--- a/drivers/char/lrng/lrng_es_archrandom.c
+++ b/drivers/char/lrng/lrng_es_archrandom.c
@@ -78,7 +78,7 @@ static u32 lrng_get_arch_data(u8 *outbuf, u32 requested_bits)
 	return requested_bits;
 }
 
-static u32 inline lrng_get_arch_data_compress(u8 *outbuf, u32 requested_bits,
+static inline u32 lrng_get_arch_data_compress(u8 *outbuf, u32 requested_bits,
 					      u32 data_multiplier)
 {
 	SHASH_DESC_ON_STACK(shash, NULL);
@@ -158,28 +158,32 @@ static u32 inline lrng_get_arch_data_compress(u8 *outbuf, u32 requested_bits,
 static u32 lrng_arch_multiplier(void)
 {
 	static u32 data_multiplier = 0;
+	unsigned long v;
 
-	if (data_multiplier > 0) {
+	if (data_multiplier > 0)
 		return data_multiplier;
+
+	if (IS_ENABLED(CONFIG_X86) && !arch_get_random_seed_long(&v)) {
+		/*
+		 * Intel SPEC: pulling 512 blocks from RDRAND ensures
+		 * one reseed making it logically equivalent to RDSEED.
+		 */
+		data_multiplier = 512;
+	} else if (IS_ENABLED(CONFIG_PPC)) {
+		/*
+		 * PowerISA defines DARN to deliver at least 0.5 bits of
+		 * entropy per data bit.
+		 */
+		data_multiplier = 2;
+	} else if (IS_ENABLED(CONFIG_RISCV)) {
+		/*
+		 * riscv-crypto-spec-scalar-1.0.0-rc6.pdf section 4.2 defines
+		 * this requirement.
+		 */
+		data_multiplier = 2;
 	} else {
-		unsigned long v;
-
-		if (IS_ENABLED(CONFIG_X86) && !arch_get_random_seed_long(&v)) {
-			/*
-			 * Intel SPEC: pulling 512 blocks from RDRAND ensures
-			 * one reseed making it logically equivalent to RDSEED.
-			 */
-			data_multiplier = 512;
-		} else if (IS_ENABLED(CONFIG_PPC)) {
-			/*
-			 * PowerISA defines DARN to deliver at least 0.5 bits of
-			 * entropy per data bit.
-			 */
-			data_multiplier = 2;
-		} else {
-			/* CPU provides full entropy */
-			data_multiplier = CONFIG_LRNG_CPU_FULL_ENT_MULTIPLIER;
-		}
+		/* CPU provides full entropy */
+		data_multiplier = CONFIG_LRNG_CPU_FULL_ENT_MULTIPLIER;
 	}
 	return data_multiplier;
 }
diff --git a/drivers/char/lrng/lrng_es_irq.c b/drivers/char/lrng/lrng_es_irq.c
index 82a73b042..b97fec244 100644
--- a/drivers/char/lrng/lrng_es_irq.c
+++ b/drivers/char/lrng/lrng_es_irq.c
@@ -111,6 +111,7 @@ static inline bool lrng_gcd_tested(void)
 static inline void _lrng_gcd_set(u32 running_gcd)
 {
 	lrng_gcd_timer = running_gcd;
+	/* Ensure that update to global variable lrng_gcd_timer is visible */
 	mb();
 }
 
@@ -245,6 +246,7 @@ static int __init lrng_init_time_source(void)
 			LRNG_IRQ_OVERSAMPLING_FACTOR);
 		lrng_pcpu_check_compression_state();
 	}
+	/* Ensure that changes to global variables are visible */
 	mb();
 
 	return 0;
diff --git a/drivers/char/lrng/lrng_health.c b/drivers/char/lrng/lrng_health.c
index a56a0c426..66afc04dc 100644
--- a/drivers/char/lrng/lrng_health.c
+++ b/drivers/char/lrng/lrng_health.c
@@ -174,8 +174,8 @@ bool lrng_sp80090b_startup_complete(void)
 {
 	struct lrng_health *health = &lrng_health;
 
-	return (lrng_sp80090b_health_enabled()) ? health->sp80090b_startup_done:
-						  true;
+	return (lrng_sp80090b_health_enabled()) ?
+	       health->sp80090b_startup_done : true;
 }
 
 bool lrng_sp80090b_compliant(void)
diff --git a/drivers/char/lrng/lrng_internal.h b/drivers/char/lrng/lrng_internal.h
index d67aa3c33..c01c4e5fa 100644
--- a/drivers/char/lrng/lrng_internal.h
+++ b/drivers/char/lrng/lrng_internal.h
@@ -216,7 +216,8 @@ struct lrng_drng {
 	const struct lrng_crypto_cb *crypto_cb;	/* Crypto callbacks */
 	atomic_t requests;			/* Number of DRNG requests */
 	atomic_t requests_since_fully_seeded;	/* Number DRNG requests since
-						   last fully seeded */
+						 * last fully seeded
+						 */
 	unsigned long last_seeded;		/* Last time it was seeded */
 	bool fully_seeded;			/* Is DRNG fully seeded? */
 	bool force_reseed;			/* Force a reseed */
@@ -287,6 +288,7 @@ static inline u32 lrng_compress_osr(void)
 static inline u32 lrng_reduce_by_osr(u32 entropy_bits)
 {
 	u32 osr_bits = lrng_compress_osr();
+
 	return (entropy_bits >= osr_bits) ? (entropy_bits - osr_bits) : 0;
 }
 
diff --git a/drivers/char/lrng/lrng_kcapi.c b/drivers/char/lrng/lrng_kcapi.c
index b06449cb2..fa76b2d57 100644
--- a/drivers/char/lrng/lrng_kcapi.c
+++ b/drivers/char/lrng/lrng_kcapi.c
@@ -48,14 +48,12 @@ static int lrng_kcapi_drng_seed_helper(void *drng, const u8 *inbuf,
 	struct crypto_rng *kcapi_rng = lrng_drng_info->kcapi_rng;
 	void *hash = lrng_drng_info->lrng_hash;
 	u32 digestsize = lrng_kcapi_hash_digestsize(hash);
-	u8 digest[64] __aligned(8);
+	u8 digest[HASH_MAX_DIGESTSIZE] __aligned(8);
 	int ret;
 
 	if (!hash)
 		return crypto_rng_reset(kcapi_rng, inbuf, inbuflen);
 
-	BUG_ON(digestsize > sizeof(digest));
-
 	ret = lrng_kcapi_hash_init(shash, hash) ?:
 	      lrng_kcapi_hash_update(shash, inbuf, inbuflen) ?:
 	      lrng_kcapi_hash_final(shash, digest);
diff --git a/drivers/char/lrng/lrng_numa.c b/drivers/char/lrng/lrng_numa.c
index fbfb40a5f..f13ee0314 100644
--- a/drivers/char/lrng/lrng_numa.c
+++ b/drivers/char/lrng/lrng_numa.c
@@ -16,6 +16,7 @@ static struct lrng_drng **lrng_drng __read_mostly = NULL;
 
 struct lrng_drng **lrng_drng_instances(void)
 {
+	/* counterpart to cmpxchg_release in _lrng_drngs_numa_alloc */
 	return smp_load_acquire(&lrng_drng);
 }
 
diff --git a/drivers/char/lrng/lrng_proc.c b/drivers/char/lrng/lrng_proc.c
index b48094c32..9d5b3153e 100644
--- a/drivers/char/lrng/lrng_proc.c
+++ b/drivers/char/lrng/lrng_proc.c
@@ -86,6 +86,7 @@ static int lrng_drng_reseed_max_min;
 void lrng_proc_update_max_write_thresh(u32 new_digestsize)
 {
 	lrng_max_write_thresh = (int)new_digestsize;
+	/* Ensure that changes to the global variable are visible */
 	mb();
 }
 
diff --git a/drivers/char/lrng/lrng_selftest.c b/drivers/char/lrng/lrng_selftest.c
index 4412ebd2a..7f65c047e 100644
--- a/drivers/char/lrng/lrng_selftest.c
+++ b/drivers/char/lrng/lrng_selftest.c
@@ -196,7 +196,8 @@ static unsigned int lrng_hash_selftest(void)
 	static const u8 hash_input[] = { 0x61, 0x62, 0x63 }; /* "abc" */
 	u8 digest[sizeof(lrng_hash_selftest_result)] __aligned(sizeof(u32));
 
-	BUG_ON(sizeof(digest) != crypto_cb->lrng_hash_digestsize(NULL));
+	if (sizeof(digest) != crypto_cb->lrng_hash_digestsize(NULL))
+		return LRNG_SEFLTEST_ERROR_HASH;
 
 	if (!crypto_cb->lrng_hash_init(shash, NULL) &&
 	    !crypto_cb->lrng_hash_update(shash, hash_input,
-- 
2.34.1.75.gabe6bb3905

