From e622602b438da12ecff27fbba81b89a72276aac7 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 28 Sep 2020 20:20:29 +0200
Subject: [PATCH 1/5] sched/alt: Export can_nice symbol for Android Binder IPC

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/alt_core.c | 1 +
 1 file changed, 1 insertion(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index e296d56e85f0..f74ff208be90 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -4764,6 +4764,7 @@ int can_nice(const struct task_struct *p, const int nice)
 	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
 		capable(CAP_SYS_NICE));
 }
+EXPORT_SYMBOL_GPL(can_nice);
 
 #ifdef __ARCH_WANT_SYS_NICE
 
-- 
2.33.0.rc0.52.ge5a14ddd2d


From b47f12c31d019654b49519fc0261d518e00b1753 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 29 Apr 2021 02:53:36 +0200
Subject: [PATCH 2/5] sched/alt: Resync with lru multigenerational

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/alt_core.c | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index f74ff208be90..64de8796543d 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -3194,6 +3194,7 @@ context_switch(struct rq *rq, struct task_struct *prev,
 		 * finish_task_switch()'s mmdrop().
 		 */
 		switch_mm_irqs_off(prev->active_mm, next->mm, next);
+		lru_gen_switch_mm(prev->active_mm, next->mm);
 
 		if (!prev->mm) {                        // from kernel
 			/* will mmdrop() in finish_task_switch(). */
@@ -6237,6 +6238,7 @@ void idle_task_exit(void)
 
 	if (mm != &init_mm) {
 		switch_mm(mm, &init_mm, current);
+		lru_gen_switch_mm(mm, &init_mm);
 		finish_arch_post_lock_switch();
 	}
 
-- 
2.33.0.rc0.52.ge5a14ddd2d


From 741725423b99a707576fb5be9a014bec78c6d86c Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 17 Sep 2020 01:38:47 +0200
Subject: [PATCH 3/5] init, Kconfig: set default value of SCHED_PDS

Prefer PDS to BMQ by default due to better CPU utilisation & higher throughput.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 init/Kconfig | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/init/Kconfig b/init/Kconfig
index 7746c8d4610b..27f264249919 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -793,7 +793,7 @@ if SCHED_ALT
 
 choice
 	prompt "Alternative CPU Scheduler"
-	default SCHED_BMQ
+	default SCHED_PDS
 
 config SCHED_BMQ
 	bool "BMQ CPU scheduler"
-- 
2.33.0.rc0.52.ge5a14ddd2d


From a3edb9ce4c649522ffa5ff9ccd969cebd973d107 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 21 Sep 2020 17:26:14 +0200
Subject: [PATCH 4/5] init, Kconfig: Restore original PDS description

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 init/Kconfig | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/init/Kconfig b/init/Kconfig
index 27f264249919..5f11625272ec 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -806,7 +806,9 @@ config SCHED_PDS
 	bool "PDS CPU scheduler"
 	help
 	  The Priority and Deadline based Skip list multiple queue CPU
-	  Scheduler.
+	  scheduler for excellent interactivity and responsiveness on the
+	  desktop and solid scalability on normal hardware and commodity
+	  servers.
 
 endchoice
 
-- 
2.33.0.rc0.52.ge5a14ddd2d


From ea58bd574f3c9bbef5a8dcb5f383044a6a102f50 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Sat, 14 Aug 2021 19:23:54 +0200
Subject: [PATCH 5/5] sched/alt: Add MG-LRU changes through ifdef macro

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/alt_core.c | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 64de8796543d..e521eda700b1 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -3194,7 +3194,9 @@ context_switch(struct rq *rq, struct task_struct *prev,
 		 * finish_task_switch()'s mmdrop().
 		 */
 		switch_mm_irqs_off(prev->active_mm, next->mm, next);
+#ifdef CONFIG_LRU_GEN
 		lru_gen_switch_mm(prev->active_mm, next->mm);
+#endif
 
 		if (!prev->mm) {                        // from kernel
 			/* will mmdrop() in finish_task_switch(). */
@@ -6238,7 +6240,9 @@ void idle_task_exit(void)
 
 	if (mm != &init_mm) {
 		switch_mm(mm, &init_mm, current);
+#ifdef CONFIG_LRU_GEN
 		lru_gen_switch_mm(mm, &init_mm);
+#endif
 		finish_arch_post_lock_switch();
 	}
 
-- 
2.33.0.rc0.52.ge5a14ddd2d

