From 70c98a89fe8e5a3f48caeb35c16c443509dbf877 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 11 Aug 2021 11:35:51 +0200
Subject: [PATCH 87/95] Revert "block: fix ioprio interface"

This reverts commit 181cf24c8f1792a02ac500cb7b591d839b80e7f2.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 include/linux/ioprio.h      | 15 +++------------
 include/uapi/linux/ioprio.h | 19 ++++++++-----------
 2 files changed, 11 insertions(+), 23 deletions(-)

diff --git a/include/linux/ioprio.h b/include/linux/ioprio.h
index 9b3a6d817..ef9ad4fb2 100644
--- a/include/linux/ioprio.h
+++ b/include/linux/ioprio.h
@@ -8,16 +8,6 @@
 
 #include <uapi/linux/ioprio.h>
 
-/*
- * Check that a priority value has a valid class.
- */
-static inline bool ioprio_valid(unsigned short ioprio)
-{
-	unsigned short class = IOPRIO_PRIO_CLASS(ioprio);
-
-	return class > IOPRIO_CLASS_NONE && class < IOPRIO_CLASS_MAX;
-}
-
 /*
  * if process has set io priority explicitly, use that. if not, convert
  * the cpu scheduler nice value to an io priority
@@ -35,9 +25,10 @@ static inline int task_nice_ioclass(struct task_struct *task)
 {
 	if (task->policy == SCHED_IDLE)
 		return IOPRIO_CLASS_IDLE;
-	if (task_is_realtime(task))
+	else if (task_is_realtime(task))
 		return IOPRIO_CLASS_RT;
-	return IOPRIO_CLASS_BE;
+	else
+		return IOPRIO_CLASS_BE;
 }
 
 /*
diff --git a/include/uapi/linux/ioprio.h b/include/uapi/linux/ioprio.h
index abc40965a..77b17e08b 100644
--- a/include/uapi/linux/ioprio.h
+++ b/include/uapi/linux/ioprio.h
@@ -5,15 +5,12 @@
 /*
  * Gives us 8 prio classes with 13-bits of data for each class
  */
-#define IOPRIO_CLASS_SHIFT	13
-#define IOPRIO_CLASS_MASK	0x07
+#define IOPRIO_CLASS_SHIFT	(13)
 #define IOPRIO_PRIO_MASK	((1UL << IOPRIO_CLASS_SHIFT) - 1)
 
-#define IOPRIO_PRIO_CLASS(ioprio)	\
-	(((ioprio) >> IOPRIO_CLASS_SHIFT) & IOPRIO_CLASS_MASK)
-#define IOPRIO_PRIO_DATA(ioprio)	((ioprio) & IOPRIO_PRIO_MASK)
-#define IOPRIO_PRIO_VALUE(class, data)	\
-	(((class) << IOPRIO_CLASS_SHIFT) | ((data) & IOPRIO_PRIO_MASK))
+#define IOPRIO_PRIO_CLASS(mask)	((mask) >> IOPRIO_CLASS_SHIFT)
+#define IOPRIO_PRIO_DATA(mask)	((mask) & IOPRIO_PRIO_MASK)
+#define IOPRIO_PRIO_VALUE(class, data)	(((class) << IOPRIO_CLASS_SHIFT) | data)
 
 /*
  * These are the io priority groups as implemented by CFQ. RT is the realtime
@@ -26,14 +23,14 @@ enum {
 	IOPRIO_CLASS_RT,
 	IOPRIO_CLASS_BE,
 	IOPRIO_CLASS_IDLE,
-
-	IOPRIO_CLASS_MAX,
 };
 
+#define ioprio_valid(mask)	(IOPRIO_PRIO_CLASS((mask)) != IOPRIO_CLASS_NONE)
+
 /*
  * 8 best effort priority levels are supported
  */
-#define IOPRIO_BE_NR	8
+#define IOPRIO_BE_NR	(8)
 
 enum {
 	IOPRIO_WHO_PROCESS = 1,
@@ -44,6 +41,6 @@ enum {
 /*
  * Fallback BE priority
  */
-#define IOPRIO_NORM	4
+#define IOPRIO_NORM	(4)
 
 #endif /* _UAPI_LINUX_IOPRIO_H */
-- 
2.33.0.rc0.52.ge5a14ddd2d

