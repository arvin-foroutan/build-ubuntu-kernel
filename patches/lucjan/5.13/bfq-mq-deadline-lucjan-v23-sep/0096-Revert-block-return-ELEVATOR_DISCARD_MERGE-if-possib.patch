From 2aee9c81557db6c164b08319a6b7340f32483742 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 11 Aug 2021 22:16:20 +0200
Subject: [PATCH 096/114] Revert "block: return ELEVATOR_DISCARD_MERGE if
 possible"

This reverts commit 2e8134e04ea8cd7a7828bf597979fa068255967b.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c      |  3 ---
 block/blk-merge.c        | 16 ++++++++++++++++
 block/elevator.c         |  3 ---
 block/mq-deadline-main.c |  2 --
 include/linux/blkdev.h   | 16 ----------------
 5 files changed, 16 insertions(+), 24 deletions(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index c4ed7f9c8..f929b0860 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -2473,9 +2473,6 @@ static int bfq_request_merge(struct request_queue *q, struct request **req,
 	__rq = bfq_find_rq_fmerge(bfqd, bio, q);
 	if (__rq && elv_bio_merge_ok(__rq, bio)) {
 		*req = __rq;
-
-		if (blk_discard_mergable(__rq))
-			return ELEVATOR_DISCARD_MERGE;
 		return ELEVATOR_FRONT_MERGE;
 	}
 
diff --git a/block/blk-merge.c b/block/blk-merge.c
index f8707ff7e..a11b3b537 100644
--- a/block/blk-merge.c
+++ b/block/blk-merge.c
@@ -705,6 +705,22 @@ static void blk_account_io_merge_request(struct request *req)
 	}
 }
 
+/*
+ * Two cases of handling DISCARD merge:
+ * If max_discard_segments > 1, the driver takes every bio
+ * as a range and send them to controller together. The ranges
+ * needn't to be contiguous.
+ * Otherwise, the bios/requests will be handled as same as
+ * others which should be contiguous.
+ */
+static inline bool blk_discard_mergable(struct request *req)
+{
+	if (req_op(req) == REQ_OP_DISCARD &&
+	    queue_max_discard_segments(req->q) > 1)
+		return true;
+	return false;
+}
+
 static enum elv_merge blk_try_req_merge(struct request *req,
 					struct request *next)
 {
diff --git a/block/elevator.c b/block/elevator.c
index 9ebd75a6d..3c0f6caac 100644
--- a/block/elevator.c
+++ b/block/elevator.c
@@ -336,9 +336,6 @@ enum elv_merge elv_merge(struct request_queue *q, struct request **req,
 	__rq = elv_rqhash_find(q, bio->bi_iter.bi_sector);
 	if (__rq && elv_bio_merge_ok(__rq, bio)) {
 		*req = __rq;
-
-		if (blk_discard_mergable(__rq))
-			return ELEVATOR_DISCARD_MERGE;
 		return ELEVATOR_BACK_MERGE;
 	}
 
diff --git a/block/mq-deadline-main.c b/block/mq-deadline-main.c
index 37af257df..d005cce73 100644
--- a/block/mq-deadline-main.c
+++ b/block/mq-deadline-main.c
@@ -676,8 +676,6 @@ static int dd_request_merge(struct request_queue *q, struct request **rq,
 
 		if (elv_bio_merge_ok(__rq, bio)) {
 			*rq = __rq;
-			if (blk_discard_mergable(__rq))
-				return ELEVATOR_DISCARD_MERGE;
 			return ELEVATOR_FRONT_MERGE;
 		}
 	}
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index eed3b9900..af8137ba5 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1531,22 +1531,6 @@ static inline int queue_limit_discard_alignment(struct queue_limits *lim, sector
 	return offset << SECTOR_SHIFT;
 }
 
-/*
- * Two cases of handling DISCARD merge:
- * If max_discard_segments > 1, the driver takes every bio
- * as a range and send them to controller together. The ranges
- * needn't to be contiguous.
- * Otherwise, the bios/requests will be handled as same as
- * others which should be contiguous.
- */
-static inline bool blk_discard_mergable(struct request *req)
-{
-	if (req_op(req) == REQ_OP_DISCARD &&
-	    queue_max_discard_segments(req->q) > 1)
-		return true;
-	return false;
-}
-
 static inline int bdev_discard_alignment(struct block_device *bdev)
 {
 	struct request_queue *q = bdev_get_queue(bdev);
-- 
2.33.0

