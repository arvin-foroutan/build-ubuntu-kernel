From f1f7469c6284c852057358d9671af7f633dddb0a Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Sat, 28 Aug 2021 18:16:17 +0200
Subject: [PATCH 111/114] Revert "block/mq-deadline: Speed up the dispatch of
 low-priority requests"

This reverts commit c80c7de899c1cf68170ffbca8d0de1c543f601b4.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/mq-deadline.c | 14 +++++---------
 1 file changed, 5 insertions(+), 9 deletions(-)

diff --git a/block/mq-deadline.c b/block/mq-deadline.c
index 5bd3cac46..0e37c8959 100644
--- a/block/mq-deadline.c
+++ b/block/mq-deadline.c
@@ -79,7 +79,6 @@ struct dd_per_prio {
 	struct list_head fifo_list[DD_DIR_COUNT];
 	/* Next request in FIFO order. Read, write or both are NULL. */
 	struct request *next_rq[DD_DIR_COUNT];
-	unsigned int nr_queued;
 };
 
 struct deadline_data {
@@ -278,9 +277,9 @@ deadline_move_request(struct deadline_data *dd, struct dd_per_prio *per_prio,
 }
 
 /* Number of requests queued for a given priority level. */
-static __always_inline u32 dd_queued(struct deadline_data *dd, enum dd_prio prio)
+static u32 dd_queued(struct deadline_data *dd, enum dd_prio prio)
 {
-	return dd->per_prio[prio].nr_queued;
+	return dd_sum(dd, inserted, prio) - dd_sum(dd, completed, prio);
 }
 
 /*
@@ -714,8 +713,6 @@ static void dd_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 
 	prio = ioprio_class_to_prio[ioprio_class];
 	dd_count(dd, inserted, prio);
-	per_prio = &dd->per_prio[prio];
-	per_prio->nr_queued++;
 
 	if (blk_mq_sched_try_insert_merge(q, rq, &free)) {
 		blk_mq_free_requests(&free);
@@ -724,6 +721,7 @@ static void dd_insert_request(struct blk_mq_hw_ctx *hctx, struct request *rq,
 
 	trace_block_rq_insert(rq);
 
+	per_prio = &dd->per_prio[prio];
 	if (at_head) {
 		list_add(&rq->queuelist, &per_prio->dispatch);
 	} else {
@@ -794,14 +792,12 @@ static void dd_finish_request(struct request *rq)
 	const u8 ioprio_class = dd_rq_ioclass(rq);
 	const enum dd_prio prio = ioprio_class_to_prio[ioprio_class];
 	struct dd_per_prio *per_prio = &dd->per_prio[prio];
-	unsigned long flags;
 
 	dd_count(dd, completed, prio);
-	spin_lock_irqsave(&dd->lock, flags);
-	per_prio->nr_queued--;
-	spin_unlock_irqrestore(&dd->lock, flags);
 
 	if (blk_queue_is_zoned(q)) {
+		unsigned long flags;
+
 		spin_lock_irqsave(&dd->zone_lock, flags);
 		blk_req_zone_write_unlock(rq);
 		if (!list_empty(&per_prio->fifo_list[DD_WRITE]))
-- 
2.33.0

