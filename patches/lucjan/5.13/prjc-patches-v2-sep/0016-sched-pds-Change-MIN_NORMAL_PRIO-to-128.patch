From 34e4ebdbaba5e1f30349524a9f1438b96f0ff305 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Thu, 27 May 2021 14:34:44 +0000
Subject: [PATCH 16/30] sched/pds: Change MIN_NORMAL_PRIO to 128

---
 include/linux/sched/prio.h | 17 +++++++++++++++++
 kernel/sched/alt_sched.h   |  7 ++++---
 kernel/sched/pds.h         | 31 +++++++++++++++++--------------
 3 files changed, 38 insertions(+), 17 deletions(-)

diff --git a/include/linux/sched/prio.h b/include/linux/sched/prio.h
index 4d4f92bffeea..a191f253771b 100644
--- a/include/linux/sched/prio.h
+++ b/include/linux/sched/prio.h
@@ -18,14 +18,31 @@
 #define MAX_PRIO		(MAX_RT_PRIO + NICE_WIDTH)
 #define DEFAULT_PRIO		(MAX_RT_PRIO + NICE_WIDTH / 2)
 
+#ifdef CONFIG_SCHED_ALT
+
+/* Undefine MAX_PRIO and DEFAULT_PRIO */
+#undef MAX_PRIO
+#undef DEFAULT_PRIO
+
 /* +/- priority levels from the base priority */
 #ifdef CONFIG_SCHED_BMQ
 #define MAX_PRIORITY_ADJ	7
+
+#define MIN_NORMAL_PRIO		(MAX_RT_PRIO)
+#define MAX_PRIO		(MIN_NORMAL_PRIO + NICE_WIDTH)
+#define DEFAULT_PRIO		(MIN_NORMAL_PRIO + NICE_WIDTH / 2)
 #endif
+
 #ifdef CONFIG_SCHED_PDS
 #define MAX_PRIORITY_ADJ	0
+
+#define MIN_NORMAL_PRIO		(128)
+#define MAX_PRIO		(MIN_NORMAL_PRIO + NICE_WIDTH)
+#define DEFAULT_PRIO		(MIN_NORMAL_PRIO + NICE_WIDTH / 2)
 #endif
 
+#endif /* CONFIG_SCHED_ALT */
+
 /*
  * Convert user-nice values [ -20 ... 0 ... 19 ]
  * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],
diff --git a/kernel/sched/alt_sched.h b/kernel/sched/alt_sched.h
index eb5e8d31686c..52e1baa4f5da 100644
--- a/kernel/sched/alt_sched.h
+++ b/kernel/sched/alt_sched.h
@@ -54,11 +54,12 @@
  * RT(0-99), (Low prio adj range, nice width, high prio adj range) / 2, cpu idle task */
 #define SCHED_BITS	(MAX_RT_PRIO + NICE_WIDTH / 2 + MAX_PRIORITY_ADJ + 1)
 #endif
+
 #ifdef CONFIG_SCHED_PDS
 #define SCHED_NORMAL_PRIO_NUM	(NICE_WIDTH)
-/* bits: RT(0-99), nice width / 2, cpu idle task */
-#define SCHED_BITS	(MAX_RT_PRIO + SCHED_NORMAL_PRIO_NUM + 1)
-#endif
+/* bits: RT(0-99), reserved(100-127), SCHED_NORMAL_PRIO_NUM, cpu idle task */
+#define SCHED_BITS	(MIN_NORMAL_PRIO + SCHED_NORMAL_PRIO_NUM + 1)
+#endif /* CONFIG_SCHED_PDS */
 
 #define IDLE_TASK_SCHED_PRIO	(SCHED_BITS - 1)
 
diff --git a/kernel/sched/pds.h b/kernel/sched/pds.h
index b1ea68e43ba7..4a181e6ed52f 100644
--- a/kernel/sched/pds.h
+++ b/kernel/sched/pds.h
@@ -12,7 +12,7 @@ static const u64 user_prio2deadline[NICE_WIDTH] = {
 };
 
 #define SCHED_PRIO_SLOT		(4ULL << 20)
-#define DEFAULT_SCHED_PRIO (MAX_RT_PRIO + SCHED_NORMAL_PRIO_NUM / 2)
+#define DEFAULT_SCHED_PRIO (MIN_NORMAL_PRIO + SCHED_NORMAL_PRIO_NUM / 2)
 
 DECLARE_BITMAP(normal_mask, SCHED_BITS);
 
@@ -36,13 +36,13 @@ static inline int
 task_sched_prio(const struct task_struct *p)
 {
 	return (p->prio < MAX_RT_PRIO) ? p->prio :
-		MAX_RT_PRIO + task_sched_prio_normal(p, task_rq(p));
+		MIN_NORMAL_PRIO + task_sched_prio_normal(p, task_rq(p));
 }
 
 static inline int
 task_sched_prio_idx(const struct task_struct *p, const struct rq *rq)
 {
-	return (p->prio < MAX_RT_PRIO) ? p->prio : MAX_RT_PRIO +
+	return (p->prio < MAX_RT_PRIO) ? p->prio : MIN_NORMAL_PRIO +
 		(task_sched_prio_normal(p, rq) + rq->time_edge) %
 		SCHED_NORMAL_PRIO_NUM;
 }
@@ -50,14 +50,15 @@ task_sched_prio_idx(const struct task_struct *p, const struct rq *rq)
 static inline unsigned long sched_prio2idx(unsigned long idx, struct rq *rq)
 {
 	return (IDLE_TASK_SCHED_PRIO == idx || idx < MAX_RT_PRIO) ? idx :
-		MAX_RT_PRIO + ((idx - MAX_RT_PRIO) + rq->time_edge) %
+		MIN_NORMAL_PRIO +
+		((idx - MIN_NORMAL_PRIO) + rq->time_edge) %
 		SCHED_NORMAL_PRIO_NUM;
 }
 
 static inline unsigned long sched_idx2prio(unsigned long idx, struct rq *rq)
 {
-	return (idx < MAX_RT_PRIO) ? idx : MAX_RT_PRIO +
-		((idx - MAX_RT_PRIO) + SCHED_NORMAL_PRIO_NUM -
+	return (idx < MAX_RT_PRIO) ? idx : MIN_NORMAL_PRIO +
+		((idx - MIN_NORMAL_PRIO) + SCHED_NORMAL_PRIO_NUM -
 		 rq->time_edge % SCHED_NORMAL_PRIO_NUM) %
 		SCHED_NORMAL_PRIO_NUM;
 }
@@ -66,7 +67,8 @@ static inline void sched_renew_deadline(struct task_struct *p, const struct rq *
 {
 	if (p->prio >= MAX_RT_PRIO)
 		p->deadline = rq->clock +
-			SCHED_PRIO_SLOT * (p->static_prio - MAX_RT_PRIO + 1);
+			SCHED_PRIO_SLOT *
+			(p->static_prio - MIN_NORMAL_PRIO + 1);
 }
 
 /*
@@ -110,11 +112,12 @@ static inline void update_rq_time_edge(struct rq *rq)
 	delta = min_t(u64, SCHED_NORMAL_PRIO_NUM, now - old);
 	INIT_LIST_HEAD(&head);
 
-	prio = MAX_RT_PRIO;
-	for_each_set_bit_from(prio, rq->queue.bitmap, MAX_RT_PRIO + delta) {
+	prio = MIN_NORMAL_PRIO;
+	for_each_set_bit_from(prio, rq->queue.bitmap, MIN_NORMAL_PRIO + delta) {
 		u64 idx;
 
-		idx = MAX_RT_PRIO + ((prio - MAX_RT_PRIO) + rq->time_edge) %
+		idx = MIN_NORMAL_PRIO +
+			((prio - MIN_NORMAL_PRIO) + rq->time_edge) %
 			SCHED_NORMAL_PRIO_NUM;
 		list_splice_tail_init(rq->queue.heads + idx, &head);
 	}
@@ -122,13 +125,13 @@ static inline void update_rq_time_edge(struct rq *rq)
 	rq->time_edge = now;
 	if (!list_empty(&head)) {
 		struct task_struct *p;
-		u64 new_idx = MAX_RT_PRIO + now % SCHED_NORMAL_PRIO_NUM;
+		u64 new_idx = MIN_NORMAL_PRIO + now % SCHED_NORMAL_PRIO_NUM;
 
 		list_for_each_entry(p, &head, sq_node)
 			p->sq_idx = new_idx;
 
 		list_splice(&head, rq->queue.heads + new_idx);
-		set_bit(MAX_RT_PRIO, rq->queue.bitmap);
+		set_bit(MIN_NORMAL_PRIO, rq->queue.bitmap);
 	}
 }
 
@@ -151,7 +154,7 @@ static inline void sched_task_sanity_check(struct task_struct *p, struct rq *rq)
 
 static inline void sched_imp_init(void)
 {
-	bitmap_set(normal_mask, MAX_RT_PRIO, SCHED_NORMAL_PRIO_NUM);
+	bitmap_set(normal_mask, MIN_NORMAL_PRIO, SCHED_NORMAL_PRIO_NUM);
 }
 
 /*
@@ -248,7 +251,7 @@ int task_prio(const struct task_struct *p)
 	if (p->prio < MAX_RT_PRIO)
 		return (p->prio - MAX_RT_PRIO);
 
-	ret = task_sched_prio(p) - MAX_RT_PRIO;
+	ret = task_sched_prio(p) - MIN_NORMAL_PRIO;
 
 	return ret;
 }
-- 
2.32.0.93.g670b81a890

