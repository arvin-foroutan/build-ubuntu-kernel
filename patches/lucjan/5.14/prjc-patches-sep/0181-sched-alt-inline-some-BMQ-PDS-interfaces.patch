From a62e3e4b50dd0c3e3693b53100a9a8863d276cc0 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Wed, 7 Jul 2021 10:38:54 +0000
Subject: [PATCH 181/204] sched/alt: inline some BMQ/PDS interfaces

---
 kernel/sched/bmq.h |  6 +++---
 kernel/sched/pds.h | 12 +++++-------
 2 files changed, 8 insertions(+), 10 deletions(-)

diff --git a/kernel/sched/bmq.h b/kernel/sched/bmq.h
index 7635c00dde7f..be3ee4a553ca 100644
--- a/kernel/sched/bmq.h
+++ b/kernel/sched/bmq.h
@@ -89,20 +89,20 @@ static void sched_task_fork(struct task_struct *p, struct rq *rq)
 		p->boost_prio + MAX_PRIORITY_ADJ : MAX_PRIORITY_ADJ;
 }
 
-static void do_sched_yield_type_1(struct task_struct *p, struct rq *rq)
+static inline void do_sched_yield_type_1(struct task_struct *p, struct rq *rq)
 {
 	p->boost_prio = MAX_PRIORITY_ADJ;
 }
 
 #ifdef CONFIG_SMP
-static void sched_task_ttwu(struct task_struct *p)
+static inline void sched_task_ttwu(struct task_struct *p)
 {
 	if(this_rq()->clock_task - p->last_ran > sched_timeslice_ns)
 		boost_task(p);
 }
 #endif
 
-static void sched_task_deactivate(struct task_struct *p, struct rq *rq)
+static inline void sched_task_deactivate(struct task_struct *p, struct rq *rq)
 {
 	if (rq_switch_time(rq) < boost_threshold(p))
 		boost_task(p);
diff --git a/kernel/sched/pds.h b/kernel/sched/pds.h
index 06d88e72b543..0f1f0d708b77 100644
--- a/kernel/sched/pds.h
+++ b/kernel/sched/pds.h
@@ -18,11 +18,9 @@ task_sched_prio_normal(const struct task_struct *p, const struct rq *rq)
 {
 	s64 delta = p->deadline - rq->time_edge + NORMAL_PRIO_NUM - NICE_WIDTH;
 
-	if (unlikely(delta > NORMAL_PRIO_NUM - 1)) {
-		pr_info("pds: task_sched_prio_normal delta %lld, deadline %llu, time_edge %llu\n",
-			delta, p->deadline, rq->time_edge);
+	if (WARN_ONCE(delta > NORMAL_PRIO_NUM - 1,
+		      "pds: task_sched_prio_normal() delta %lld\n", delta))
 		return NORMAL_PRIO_NUM - 1;
-	}
 
 	return (delta < 0) ? 0 : delta;
 }
@@ -118,12 +116,12 @@ static void sched_task_fork(struct task_struct *p, struct rq *rq)
 	sched_renew_deadline(p, rq);
 }
 
-static void do_sched_yield_type_1(struct task_struct *p, struct rq *rq)
+static inline void do_sched_yield_type_1(struct task_struct *p, struct rq *rq)
 {
 	time_slice_expired(p, rq);
 }
 
 #ifdef CONFIG_SMP
-static void sched_task_ttwu(struct task_struct *p) {}
+static inline void sched_task_ttwu(struct task_struct *p) {}
 #endif
-static void sched_task_deactivate(struct task_struct *p, struct rq *rq) {}
+static inline void sched_task_deactivate(struct task_struct *p, struct rq *rq) {}
-- 
2.33.0

