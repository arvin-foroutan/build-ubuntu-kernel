From 4d23113caa32329d5296068fbc893e17546751bc Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Sun, 13 Jun 2021 11:34:41 +0000
Subject: [PATCH 176/204] sched/pds: Use common normal_prio()

---
 init/init_task.c        |  7 +------
 kernel/sched/alt_core.c | 13 +++++++++++++
 kernel/sched/bmq.h      |  8 --------
 kernel/sched/pds.h      |  6 ------
 4 files changed, 14 insertions(+), 20 deletions(-)

diff --git a/init/init_task.c b/init/init_task.c
index 0abf0c16b574..177b63db4ce0 100644
--- a/init/init_task.c
+++ b/init/init_task.c
@@ -75,15 +75,10 @@ struct task_struct init_task
 	.stack		= init_stack,
 	.usage		= REFCOUNT_INIT(2),
 	.flags		= PF_KTHREAD,
-#ifdef CONFIG_SCHED_BMQ
+#ifdef CONFIG_SCHED_ALT
 	.prio		= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
 	.static_prio	= DEFAULT_PRIO,
 	.normal_prio	= DEFAULT_PRIO + MAX_PRIORITY_ADJ,
-#endif
-#ifdef CONFIG_SCHED_PDS
-	.prio		= MAX_RT_PRIO,
-	.static_prio	= DEFAULT_PRIO,
-	.normal_prio	= MAX_RT_PRIO,
 #else
 	.prio		= MAX_PRIO - 20,
 	.static_prio	= MAX_PRIO - 20,
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 946983ca5763..57c34cf29956 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -1121,6 +1121,19 @@ static inline void hrtick_rq_init(struct rq *rq)
 }
 #endif	/* CONFIG_SCHED_HRTICK */
 
+/*
+ * Calculate the expected normal priority: i.e. priority
+ * without taking RT-inheritance into account. Might be
+ * boosted by interactivity modifiers. Changes upon fork,
+ * setprio syscalls, and whenever the interactivity
+ * estimator recalculates.
+ */
+static inline int normal_prio(struct task_struct *p)
+{
+	return task_has_rt_policy(p) ? (MAX_RT_PRIO - 1 - p->rt_priority) :
+		p->static_prio + MAX_PRIORITY_ADJ;
+}
+
 /*
  * Calculate the current priority, i.e. the priority
  * taken into account by the scheduler. This value might
diff --git a/kernel/sched/bmq.h b/kernel/sched/bmq.h
index 76db5eb21a01..7635c00dde7f 100644
--- a/kernel/sched/bmq.h
+++ b/kernel/sched/bmq.h
@@ -65,14 +65,6 @@ static inline int sched_idx2prio(int idx, struct rq *rq)
 	return idx;
 }
 
-static inline int normal_prio(struct task_struct *p)
-{
-	if (task_has_rt_policy(p))
-		return MAX_RT_PRIO - 1 - p->rt_priority;
-
-	return p->static_prio + MAX_PRIORITY_ADJ;
-}
-
 static inline void time_slice_expired(struct task_struct *p, struct rq *rq)
 {
 	p->time_slice = sched_timeslice_ns;
diff --git a/kernel/sched/pds.h b/kernel/sched/pds.h
index ed336dd35809..c23294178c2b 100644
--- a/kernel/sched/pds.h
+++ b/kernel/sched/pds.h
@@ -61,12 +61,6 @@ static inline void sched_renew_deadline(struct task_struct *p, const struct rq *
 			p->static_prio - (MAX_PRIO - NICE_WIDTH);
 }
 
-static inline int normal_prio(struct task_struct *p)
-{
-	return task_has_rt_policy(p) ? (MAX_RT_PRIO - 1 - p->rt_priority) :
-		MAX_RT_PRIO;
-}
-
 int task_running_nice(struct task_struct *p)
 {
 	return task_sched_prio(p) > DEFAULT_PRIO;
-- 
2.33.0

