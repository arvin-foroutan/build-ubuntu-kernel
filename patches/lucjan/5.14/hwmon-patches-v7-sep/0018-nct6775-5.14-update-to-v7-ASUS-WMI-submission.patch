From 557c20de2efaf8e014de1a4485e4163c0b121743 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Fri, 15 Oct 2021 18:38:06 +0200
Subject: [PATCH 18/20] nct6775-5.14: update to v7 ASUS WMI submission

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 drivers/hwmon/Kconfig               |  2 +
 drivers/hwmon/asus_wmi_ec_sensors.c | 85 ++++++++++++++---------------
 drivers/hwmon/asus_wmi_sensors.c    | 20 +++----
 3 files changed, 50 insertions(+), 57 deletions(-)

diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index c85460d8f..316f841f5 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -2187,6 +2187,7 @@ config SENSORS_ATK0110
 
 config SENSORS_ASUS_WMI
 	tristate "ASUS WMI X370/X470/B450/X399"
+	depends on ACPI_WMI
 	help
 	  If you say yes here you get support for the ACPI hardware monitoring
 	  interface found in X370/X470/B450/X399 ASUS motherboards. This driver
@@ -2198,6 +2199,7 @@ config SENSORS_ASUS_WMI
 
 config SENSORS_ASUS_WMI_EC
 	tristate "ASUS WMI B550/X570"
+	depends on ACPI_WMI
 	help
 	  If you say yes here you get support for the ACPI embedded controller
 	  hardware monitoring interface found in B550/X570 ASUS motherboards.
diff --git a/drivers/hwmon/asus_wmi_ec_sensors.c b/drivers/hwmon/asus_wmi_ec_sensors.c
index 632c1d500..7080c3085 100644
--- a/drivers/hwmon/asus_wmi_ec_sensors.c
+++ b/drivers/hwmon/asus_wmi_ec_sensors.c
@@ -34,13 +34,13 @@
 #include <linux/units.h>
 #include <linux/wmi.h>
 
-#define ASUSWMI_MONITORING_GUID		"466747A0-70EC-11DE-8A39-0800200C9A66"
-#define ASUSWMI_METHODID_BLOCK_READ_EC		0x42524543 /* BREC */
-
-#define ASUS_WMI_BLOCK_READ_REGISTERS_MAX 0x10 /* from the ASUS DSDT source */
-/* from the ASUS_WMI_BLOCK_READ_REGISTERS_MAX value */
-#define ASUS_WMI_MAX_BUF_LEN 0x80
-#define MAX_SENSOR_LABEL_LENGTH 0x10
+#define	ASUSWMI_MONITORING_GUID	"466747A0-70EC-11DE-8A39-0800200C9A66"
+/* BLOCK_READ_EC */
+#define	ASUSWMI_METHODID_BREC	0x42524543
+/* from the ASUS DSDT source */
+#define	ASUSWMI_BREC_REGISTERS_MAX	0x10
+#define	ASUSWMI_MAX_BUF_LEN	0x80
+#define	SENSOR_LABEL_LEN	0x10
 
 static u32 hwmon_attributes[] = {
 	[hwmon_chip] = HWMON_C_REGISTER_TZ,
@@ -56,18 +56,18 @@ struct asus_wmi_ec_sensor_address {
 	u8 size;
 };
 
-#define MAKE_SENSOR_ADDRESS(size_i, bank_i, index_i) \
+#define	MAKE_SENSOR_ADDRESS(size_i, bank_i, index_i) \
 	{ .size = size_i,\
 	   .bank = bank_i,\
 	   .index = index_i}
 
 struct ec_sensor_info {
-	char label[MAX_SENSOR_LABEL_LENGTH];
+	char label[SENSOR_LABEL_LEN];
 	enum hwmon_sensor_types type;
 	struct asus_wmi_ec_sensor_address addr;
 };
 
-#define EC_SENSOR(sensor_label, sensor_type, size, bank, index) \
+#define	EC_SENSOR(sensor_label, sensor_type, size, bank, index) \
 	{ .label = sensor_label,\
 	.type = sensor_type, \
 	.addr = MAKE_SENSOR_ADDRESS(size, bank, index) \
@@ -181,17 +181,8 @@ static struct asus_wmi_data sensors_board_RS_X570_E_G = {
 	},
 };
 
-static struct asus_wmi_data *board_sensors;
-
-static int __init asus_wmi_dmi_matched(const struct dmi_system_id *d)
-{
-	board_sensors = d->driver_data;
-	return 0;
-}
-
-#define DMI_EXACT_MATCH_ASUS_BOARD_NAME(name, sensors) \
+#define	DMI_EXACT_MATCH_ASUS_BOARD_NAME(name, sensors) \
 	{ \
-		.callback = asus_wmi_dmi_matched, \
 		.matches = { \
 			DMI_EXACT_MATCH(DMI_BOARD_VENDOR, \
 					"ASUSTeK COMPUTER INC."), \
@@ -229,8 +220,8 @@ struct ec_sensor {
  */
 struct asus_wmi_ec_info {
 	struct ec_sensor sensors[SENSOR_MAX];
-	char read_arg[((ASUS_WMI_BLOCK_READ_REGISTERS_MAX * 4) + 1) * 2];
-	u8 read_buffer[ASUS_WMI_BLOCK_READ_REGISTERS_MAX];
+	char read_arg[((ASUSWMI_BREC_REGISTERS_MAX * 4) + 1) * 2];
+	u8 read_buffer[ASUSWMI_BREC_REGISTERS_MAX];
 	unsigned int nr_sensors;
 	unsigned int nr_registers;
 	unsigned long last_updated;
@@ -242,16 +233,12 @@ struct asus_wmi_sensors {
 	struct asus_wmi_ec_info ec;
 };
 
-static int asus_wmi_ec_fill_board_sensors(struct asus_wmi_ec_info *ec)
+static int asus_wmi_ec_fill_board_sensors(struct asus_wmi_ec_info *ec,
+					  const enum known_ec_sensor *bsi)
 {
-	const enum known_ec_sensor *bsi;
 	struct ec_sensor *s = ec->sensors;
 	int i;
 
-	if (!board_sensors)
-		return -ENODEV;
-
-	bsi = board_sensors->known_board_sensors;
 	ec->nr_sensors = 0;
 	ec->nr_registers = 0;
 
@@ -275,13 +262,15 @@ static int asus_wmi_ec_fill_board_sensors(struct asus_wmi_ec_info *ec)
  * values are byte-long (0x00 to 0xFF)
  * Numbers are encoded as UTF-16 hex values
  */
-static void asus_wmi_ec_decode_reply_buffer(const u8 *inp, u8 *out)
+static void asus_wmi_ec_decode_reply_buffer(const u8 *inp, u8 *out, u32 length)
 {
-	unsigned int len = ACPI_MIN(ASUS_WMI_MAX_BUF_LEN, inp[0] / 4);
-	char buffer[ASUS_WMI_MAX_BUF_LEN * 2];
+	char buffer[ASUSWMI_MAX_BUF_LEN * 2];
 	const char *pos = buffer;
 	const u8 *data = inp + 2;
 	unsigned int i;
+	u32 len;
+
+	len = min3((u32)ASUSWMI_MAX_BUF_LEN, (length - 2) / 4, (u32)inp[0] / 4);
 
 	utf16s_to_utf8s((wchar_t *)data, len * 2,  UTF16_LITTLE_ENDIAN, buffer, len * 2);
 
@@ -291,7 +280,7 @@ static void asus_wmi_ec_decode_reply_buffer(const u8 *inp, u8 *out)
 
 static void asus_wmi_ec_encode_registers(u16 *registers, u8 len, char *out)
 {
-	char buffer[ASUS_WMI_MAX_BUF_LEN * 2];
+	char buffer[ASUSWMI_MAX_BUF_LEN * 2];
 	char *pos = buffer;
 	unsigned int i;
 	u8 byte;
@@ -317,7 +306,7 @@ static void asus_wmi_ec_encode_registers(u16 *registers, u8 len, char *out)
 
 static void asus_wmi_ec_make_block_read_query(struct asus_wmi_ec_info *ec)
 {
-	u16 registers[ASUS_WMI_BLOCK_READ_REGISTERS_MAX];
+	u16 registers[ASUSWMI_BREC_REGISTERS_MAX];
 	const struct ec_sensor_info *si;
 	int i, j, register_idx = 0;
 
@@ -334,9 +323,7 @@ static void asus_wmi_ec_make_block_read_query(struct asus_wmi_ec_info *ec)
 
 static int asus_wmi_ec_block_read(u32 method_id, char *query, u8 *out)
 {
-#if IS_ENABLED(CONFIG_ACPI_WMI)
-	struct acpi_buffer output = { ACPI_ALLOCATE_BUFFER,
-				      NULL };
+	struct acpi_buffer output = { ACPI_ALLOCATE_BUFFER, NULL };
 	struct acpi_buffer input;
 	union acpi_object *obj;
 	acpi_status status;
@@ -354,12 +341,9 @@ static int asus_wmi_ec_block_read(u32 method_id, char *query, u8 *out)
 		acpi_os_free(obj);
 		return -EIO;
 	}
-	asus_wmi_ec_decode_reply_buffer(obj->buffer.pointer, out);
+	asus_wmi_ec_decode_reply_buffer(obj->buffer.pointer, out, obj->buffer.length);
 	acpi_os_free(obj);
 	return 0;
-#else
-	return -EOPNOTSUPP;
-#endif
 }
 
 static inline u32 get_sensor_value(const struct ec_sensor_info *si, u8 *data)
@@ -427,7 +411,7 @@ static int asus_wmi_ec_get_cached_value_or_update(int sensor_index,
 	int ret;
 
 	if (time_after(jiffies, state->ec.last_updated + HZ)) {
-		ret = asus_wmi_ec_block_read(ASUSWMI_METHODID_BLOCK_READ_EC,
+		ret = asus_wmi_ec_block_read(ASUSWMI_METHODID_BREC,
 					     state->ec.read_arg,
 					     state->ec.read_buffer);
 		if (ret)
@@ -522,7 +506,8 @@ static struct hwmon_chip_info asus_wmi_ec_chip_info = {
 };
 
 static int asus_wmi_ec_configure_sensor_setup(struct device *dev,
-					      struct asus_wmi_sensors *sensor_data)
+					      struct asus_wmi_sensors *sensor_data,
+					      const enum known_ec_sensor *bsi)
 {
 	struct hwmon_channel_info *asus_wmi_hwmon_chan;
 	const struct hwmon_channel_info **ptr_asus_wmi_ci;
@@ -533,7 +518,7 @@ static int asus_wmi_ec_configure_sensor_setup(struct device *dev,
 	struct device *hwdev;
 	int i, ret;
 
-	ret = asus_wmi_ec_fill_board_sensors(&sensor_data->ec);
+	ret = asus_wmi_ec_fill_board_sensors(&sensor_data->ec, bsi);
 	if (ret)
 		return ret;
 
@@ -598,11 +583,21 @@ static int asus_wmi_ec_configure_sensor_setup(struct device *dev,
 static int asus_wmi_probe(struct wmi_device *wdev, const void *context)
 {
 	struct asus_wmi_sensors *sensor_data;
+	struct asus_wmi_data *board_sensors;
+	const enum known_ec_sensor *bsi;
+	const struct dmi_system_id *dmi_id;
 	struct device *dev = &wdev->dev;
 
-	if (!dmi_check_system(asus_wmi_ec_dmi_table))
+	dmi_id = dmi_first_match(asus_wmi_ec_dmi_table);
+	if (!dmi_id)
 		return -ENODEV;
 
+	board_sensors = dmi_id->driver_data;
+	if (!board_sensors)
+		return -ENODEV;
+
+	bsi = board_sensors->known_board_sensors;
+
 	sensor_data = devm_kzalloc(dev, sizeof(struct asus_wmi_sensors),
 				   GFP_KERNEL);
 	if (!sensor_data)
@@ -614,7 +609,7 @@ static int asus_wmi_probe(struct wmi_device *wdev, const void *context)
 
 	/* ec init */
 	return asus_wmi_ec_configure_sensor_setup(dev,
-						  sensor_data);
+						  sensor_data, bsi);
 }
 
 static const struct wmi_device_id asus_ec_wmi_id_table[] = {
diff --git a/drivers/hwmon/asus_wmi_sensors.c b/drivers/hwmon/asus_wmi_sensors.c
index 9fe26e164..5f255b5fe 100644
--- a/drivers/hwmon/asus_wmi_sensors.c
+++ b/drivers/hwmon/asus_wmi_sensors.c
@@ -52,16 +52,16 @@
 #include <linux/units.h>
 #include <linux/wmi.h>
 
-#define ASUSWMI_MONITORING_GUID		"466747A0-70EC-11DE-8A39-0800200C9A66"
-#define ASUSWMI_METHODID_GET_VALUE	0x52574543
-#define ASUSWMI_METHODID_UPDATE_BUFFER	0x51574543
-#define ASUSWMI_METHODID_GET_INFO	0x50574543
-#define ASUSWMI_METHODID_GET_NUMBER		0x50574572
-#define ASUSWMI_METHODID_GET_VERSION		0x50574574
+#define	ASUSWMI_MONITORING_GUID	"466747A0-70EC-11DE-8A39-0800200C9A66"
+#define	ASUSWMI_METHODID_GET_VALUE	0x52574543
+#define	ASUSWMI_METHODID_UPDATE_BUFFER	0x51574543
+#define	ASUSWMI_METHODID_GET_INFO	0x50574543
+#define	ASUSWMI_METHODID_GET_NUMBER	0x50574572
+#define	ASUSWMI_METHODID_GET_VERSION	0x50574574
 
-#define ASUS_WMI_MAX_STR_SIZE	32
+#define	ASUS_WMI_MAX_STR_SIZE	32
 
-#define DMI_EXACT_MATCH_ASUS_BOARD_NAME(name) \
+#define	DMI_EXACT_MATCH_ASUS_BOARD_NAME(name) \
 	{ \
 		.matches = { \
 			DMI_EXACT_MATCH(DMI_BOARD_VENDOR, \
@@ -176,7 +176,6 @@ struct asus_wmi_sensors {
  */
 static int asus_wmi_call_method(u32 method_id, u32 *args, struct acpi_buffer *output)
 {
-#if IS_ENABLED(CONFIG_ACPI_WMI)
 	struct acpi_buffer input = {(acpi_size) sizeof(*args), args };
 	acpi_status status;
 
@@ -185,9 +184,6 @@ static int asus_wmi_call_method(u32 method_id, u32 *args, struct acpi_buffer *ou
 		return -EIO;
 
 	return 0;
-#else
-	return -EOPNOTSUPP;
-#endif
 }
 
 /*
-- 
2.33.1.711.g9d530dc002

