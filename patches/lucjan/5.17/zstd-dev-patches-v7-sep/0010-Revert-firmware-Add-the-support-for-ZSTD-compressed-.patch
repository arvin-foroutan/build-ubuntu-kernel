From 19382bcfc187a4a14a5348f17188b799f7b0bad6 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 22 Apr 2022 10:46:16 +0200
Subject: [PATCH 10/29] Revert "firmware: Add the support for ZSTD-compressed
 firmware files"

This reverts commit fcbb6a7509654d369d8bd82a47934a3ba5993f16.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/base/firmware_loader/Kconfig | 22 ++-------
 drivers/base/firmware_loader/main.c  | 74 ++--------------------------
 2 files changed, 8 insertions(+), 88 deletions(-)

diff --git a/drivers/base/firmware_loader/Kconfig b/drivers/base/firmware_loader/Kconfig
index 581bfe2c9..5b24f3959 100644
--- a/drivers/base/firmware_loader/Kconfig
+++ b/drivers/base/firmware_loader/Kconfig
@@ -157,29 +157,17 @@ config FW_LOADER_USER_HELPER_FALLBACK
 
 config FW_LOADER_COMPRESS
 	bool "Enable compressed firmware support"
+	select FW_LOADER_PAGED_BUF
+	select XZ_DEC
 	help
 	  This option enables the support for loading compressed firmware
 	  files. The caller of firmware API receives the decompressed file
 	  content. The compressed file is loaded as a fallback, only after
 	  loading the raw file failed at first.
 
-if FW_LOADER_COMPRESS
-config FW_LOADER_COMPRESS_XZ
-	bool "Enable XZ-compressed firmware support"
-	select FW_LOADER_PAGED_BUF
-	select XZ_DEC
-	help
-	  This option adds the support for XZ-compressed files.
-	  The files have to be compressed with either none or crc32
-	  integrity check type (pass "-C crc32" option to xz command).
-
-config FW_LOADER_COMPRESS_ZSTD
-	bool "Enable ZSTD-compressed firmware support"
-	select ZSTD_DECOMPRESS
-	help
-	  This option adds the support for ZSTD-compressed files.
-
-endif # FW_LOADER_COMPRESS
+	  Currently only XZ-compressed files are supported, and they have to
+	  be compressed with either none or crc32 integrity check type (pass
+	  "-C crc32" option to xz command).
 
 config FW_CACHE
 	bool "Enable firmware caching during suspend"
diff --git a/drivers/base/firmware_loader/main.c b/drivers/base/firmware_loader/main.c
index 6e94f7e8c..94d1789a2 100644
--- a/drivers/base/firmware_loader/main.c
+++ b/drivers/base/firmware_loader/main.c
@@ -35,7 +35,6 @@
 #include <linux/syscore_ops.h>
 #include <linux/reboot.h>
 #include <linux/security.h>
-#include <linux/zstd.h>
 #include <linux/xz.h>
 
 #include <generated/utsrelease.h>
@@ -305,72 +304,10 @@ int fw_map_paged_buf(struct fw_priv *fw_priv)
 }
 #endif
 
-/*
- * ZSTD-compressed firmware support
- */
-#ifdef CONFIG_FW_LOADER_COMPRESS_ZSTD
-static int fw_decompress_zstd(struct device *dev, struct fw_priv *fw_priv,
-			      size_t in_size, const void *in_buffer)
-{
-	size_t len, out_size, workspace_size;
-	void *workspace, *out_buf;
-	zstd_dctx *ctx;
-	int err;
-
-	if (fw_priv->data) {
-		out_size = fw_priv->allocated_size;
-		out_buf = fw_priv->data;
-	} else {
-		out_size = zstd_find_frame_compressed_size(in_buffer, in_size);
-		if (out_size == ZSTD_CONTENTSIZE_UNKNOWN ||
-		    out_size == ZSTD_CONTENTSIZE_ERROR) {
-			dev_dbg(dev, "%s: invalid decompression size\n", __func__);
-			return -EINVAL;
-		}
-		out_buf = vzalloc(out_size);
-		if (!out_buf)
-			return -ENOMEM;
-	}
-
-	workspace_size = zstd_dctx_workspace_bound();
-	workspace = kvzalloc(workspace_size, GFP_KERNEL);
-	if (!workspace) {
-		err = -ENOMEM;
-		goto error;
-	}
-
-	ctx = zstd_init_dctx(workspace, workspace_size);
-	if (!ctx) {
-		dev_dbg(dev, "%s: failed to initialize context\n", __func__);
-		err = -EINVAL;
-		goto error;
-	}
-
-	len = zstd_decompress_dctx(ctx, out_buf, out_size, in_buffer, in_size);
-	if (zstd_is_error(len)) {
-		dev_dbg(dev, "%s: failed to decompress: %d\n", __func__,
-			zstd_get_error_code(len));
-		err = -EINVAL;
-		goto error;
-	}
-
-	fw_priv->size = len;
-	if (!fw_priv->data)
-		fw_priv->data = out_buf;
-	err = 0;
-
- error:
-	kvfree(workspace);
-	if (!fw_priv->data)
-		vfree(out_buf);
-	return err;
-}
-#endif /* CONFIG_FW_LOADER_COMPRESS_ZSTD */
-
 /*
  * XZ-compressed firmware support
  */
-#ifdef CONFIG_FW_LOADER_COMPRESS_XZ
+#ifdef CONFIG_FW_LOADER_COMPRESS
 /* show an error and return the standard error code */
 static int fw_decompress_xz_error(struct device *dev, enum xz_ret xz_ret)
 {
@@ -464,7 +401,7 @@ static int fw_decompress_xz(struct device *dev, struct fw_priv *fw_priv,
 	else
 		return fw_decompress_xz_pages(dev, fw_priv, in_size, in_buffer);
 }
-#endif /* CONFIG_FW_LOADER_COMPRESS_XZ */
+#endif /* CONFIG_FW_LOADER_COMPRESS */
 
 /* direct firmware loading support */
 static char fw_path_para[256];
@@ -820,12 +757,7 @@ _request_firmware(const struct firmware **firmware_p, const char *name,
 	if (!(opt_flags & FW_OPT_PARTIAL))
 		nondirect = true;
 
-#ifdef CONFIG_FW_LOADER_COMPRESS_ZSTD
-	if (ret == -ENOENT && nondirect)
-		ret = fw_get_filesystem_firmware(device, fw->priv, ".zst",
-						 fw_decompress_zstd);
-#endif
-#ifdef CONFIG_FW_LOADER_COMPRESS_XZ
+#ifdef CONFIG_FW_LOADER_COMPRESS
 	if (ret == -ENOENT && nondirect)
 		ret = fw_get_filesystem_firmware(device, fw->priv, ".xz",
 						 fw_decompress_xz);
-- 
2.36.0.44.g0f828332d5

