From 2355618ea62715c88d4a8ba17dda235a57eceb78 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Wed, 30 Mar 2022 14:09:08 +0000
Subject: [PATCH 256/273] sched/alt: [Sync] c65cfd89cef6 sched: Fix yet more
 sched_fork() races

---
 kernel/sched/alt_core.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index c90cd4a48660..3a841b733f1e 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -2989,17 +2989,14 @@ int sched_fork(unsigned long clone_flags, struct task_struct *p)
 	return 0;
 }
 
-void sched_post_fork(struct task_struct *p, struct kernel_clone_args *kargs)
+void sched_cgroup_fork(struct task_struct *p, struct kernel_clone_args *kargs)
 {
 	unsigned long flags;
 	struct rq *rq;
 
 	/*
-	 * The child is not yet in the pid-hash so no cgroup attach races,
-	 * and the cgroup is pinned to this child due to cgroup_fork()
-	 * is ran before sched_fork().
-	 *
-	 * Silence PROVE_RCU.
+	 * Because we're not yet on the pid-hash, p->pi_lock isn't strictly
+	 * required yet, but lockdep gets upset if rules are violated.
 	 */
 	raw_spin_lock_irqsave(&p->pi_lock, flags);
 	/*
@@ -3032,6 +3029,10 @@ void sched_post_fork(struct task_struct *p, struct kernel_clone_args *kargs)
 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
 }
 
+void sched_post_fork(struct task_struct *p)
+{
+}
+
 #ifdef CONFIG_SCHEDSTATS
 
 DEFINE_STATIC_KEY_FALSE(sched_schedstats);
-- 
2.36.1.74.g277cf0bc36

