From 17340e53e63f92696b0c4317e1515005388c2b86 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Fri, 15 Oct 2021 13:50:38 +0000
Subject: [PATCH 219/232] sched/alt: [Sync] 508958259bb3 rcu: Explain why
 rcu_all_qs() is a stub in preemptible TREE RCU

---
 kernel/sched/alt_core.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index e1a7c163c2d5..3f74f912d534 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -5848,6 +5848,17 @@ int __sched __cond_resched(void)
 		preempt_schedule_common();
 		return 1;
 	}
+	/*
+	 * In preemptible kernels, ->rcu_read_lock_nesting tells the tick
+	 * whether the current CPU is in an RCU read-side critical section,
+	 * so the tick can report quiescent states even for CPUs looping
+	 * in kernel context.  In contrast, in non-preemptible kernels,
+	 * RCU readers leave no in-memory hints, which means that CPU-bound
+	 * processes executing in kernel context might never report an
+	 * RCU quiescent state.  Therefore, the following code causes
+	 * cond_resched() to report a quiescent state, but only when RCU
+	 * is in urgent need of one.
+	 */
 #ifndef CONFIG_PREEMPT_RCU
 	rcu_all_qs();
 #endif
-- 
2.33.1.711.g9d530dc002

