From 980515b7309d267593a9d59886a777db610daef4 Mon Sep 17 00:00:00 2001
From: Alfred Chen <cchalpha@gmail.com>
Date: Fri, 28 May 2021 14:47:49 +0000
Subject: [PATCH 167/232] sched/pds: Default 2ms time slice

---
 kernel/sched/alt_core.c |  3 ++-
 kernel/sched/bmq.h      |  2 ++
 kernel/sched/pds.h      | 51 ++++++++++++++++++-----------------------
 3 files changed, 26 insertions(+), 30 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index b553f5fa60dd..db8f5b24089d 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -77,7 +77,7 @@ __read_mostly int sysctl_resched_latency_warn_once = 1;
 #define STOP_PRIO		(MAX_RT_PRIO - 1)
 
 /* Default time slice is 4 in ms, can be set via kernel parameter "sched_timeslice" */
-u64 sched_timeslice_ns __read_mostly = (4 << 20);
+u64 sched_timeslice_ns __read_mostly = (2 << 20);
 
 static int __init sched_timeslice(char *str)
 {
@@ -6689,6 +6689,7 @@ void __init sched_init(void)
 	struct rq *rq;
 
 	printk(KERN_INFO ALT_SCHED_VERSION_MSG);
+	sched_imp_init();
 
 	wait_bit_init();
 
diff --git a/kernel/sched/bmq.h b/kernel/sched/bmq.h
index ed6995865d81..7299b5cc9a87 100644
--- a/kernel/sched/bmq.h
+++ b/kernel/sched/bmq.h
@@ -36,6 +36,8 @@ static inline void deboost_task(struct task_struct *p)
 /*
  * Common interfaces
  */
+static inline void sched_imp_init(void) {}
+
 static inline int normal_prio(struct task_struct *p)
 {
 	if (task_has_rt_policy(p))
diff --git a/kernel/sched/pds.h b/kernel/sched/pds.h
index 79121046e892..6bba054465d3 100644
--- a/kernel/sched/pds.h
+++ b/kernel/sched/pds.h
@@ -1,17 +1,7 @@
 #define ALT_SCHED_VERSION_MSG "sched/pds: PDS CPU Scheduler "ALT_SCHED_VERSION" by Alfred Chen.\n"
 
-static const u64 user_prio2deadline[NICE_WIDTH] = {
-/* -20 */	  4194304,   4613734,   5075107,   5582617,   6140878,
-/* -15 */	  6754965,   7430461,   8173507,   8990857,   9889942,
-/* -10 */	 10878936,  11966829,  13163511,  14479862,  15927848,
-/*  -5 */	 17520632,  19272695,  21199964,  23319960,  25651956,
-/*   0 */	 28217151,  31038866,  34142752,  37557027,  41312729,
-/*   5 */	 45444001,  49988401,  54987241,  60485965,  66534561,
-/*  10 */	 73188017,  80506818,  88557499,  97413248, 107154572,
-/*  15 */	117870029, 129657031, 142622734, 156885007, 172573507
-};
-
-#define SCHED_PRIO_SLOT		(4ULL << 20)
+static u64 user_prio2deadline[NICE_WIDTH];
+
 #define DEFAULT_SCHED_PRIO (MIN_NORMAL_PRIO + SCHED_NORMAL_PRIO_NUM / 2)
 
 extern int alt_debug[20];
@@ -19,11 +9,11 @@ extern int alt_debug[20];
 static inline int
 task_sched_prio_normal(const struct task_struct *p, const struct rq *rq)
 {
-	s64 delta = (p->deadline >> 22) - rq->time_edge  - 1;
+	s64 delta = (p->deadline >> 21) - rq->time_edge  - 1;
 
 	if (unlikely(delta > SCHED_NORMAL_PRIO_NUM - 1)) {
 		pr_info("pds: task_sched_prio_normal delta %lld, deadline %llu(%llu), time_edge %llu\n",
-			delta, p->deadline, p->deadline >> 22, rq->time_edge);
+			delta, p->deadline, p->deadline >> 21, rq->time_edge);
 		delta = SCHED_NORMAL_PRIO_NUM - 1ULL;
 	}
 
@@ -48,8 +38,7 @@ task_sched_prio_idx(const struct task_struct *p, const struct rq *rq)
 static inline unsigned long sched_prio2idx(unsigned long idx, struct rq *rq)
 {
 	return (IDLE_TASK_SCHED_PRIO == idx || idx < MAX_RT_PRIO) ? idx :
-		MIN_NORMAL_PRIO +
-		((idx - MIN_NORMAL_PRIO) + rq->time_edge) %
+		MIN_NORMAL_PRIO + ((idx - MIN_NORMAL_PRIO) + rq->time_edge) %
 		SCHED_NORMAL_PRIO_NUM;
 }
 
@@ -64,13 +53,23 @@ static inline unsigned long sched_idx2prio(unsigned long idx, struct rq *rq)
 static inline void sched_renew_deadline(struct task_struct *p, const struct rq *rq)
 {
 	if (p->prio >= MAX_RT_PRIO)
-		p->deadline = rq->clock + SCHED_PRIO_SLOT *
-			(p->static_prio - MIN_NORMAL_PRIO + 1);
+		p->deadline = rq->clock +
+			user_prio2deadline[p->static_prio - MIN_NORMAL_PRIO];
 }
 
 /*
  * Common interfaces
  */
+static inline void sched_imp_init(void)
+{
+	int i;
+
+	user_prio2deadline[0] = sched_timeslice_ns;
+	for (i = 1; i < NICE_WIDTH; i++)
+		user_prio2deadline[i] =
+			user_prio2deadline[i - 1] + sched_timeslice_ns;
+}
+
 static inline int normal_prio(struct task_struct *p)
 {
 	if (task_has_rt_policy(p))
@@ -88,7 +87,7 @@ static inline void update_rq_time_edge(struct rq *rq)
 {
 	struct list_head head;
 	u64 old = rq->time_edge;
-	u64 now = rq->clock >> 22;
+	u64 now = rq->clock >> 21;
 	u64 prio, delta;
 
 	if (now == old)
@@ -131,8 +130,8 @@ static inline void time_slice_expired(struct task_struct *p, struct rq *rq)
 
 static inline void sched_task_sanity_check(struct task_struct *p, struct rq *rq)
 {
-	if (unlikely(p->deadline > rq->clock + 40 * SCHED_PRIO_SLOT))
-		p->deadline = rq->clock + 40 * SCHED_PRIO_SLOT;
+	if (unlikely(p->deadline > rq->clock + user_prio2deadline[NICE_WIDTH - 1]))
+		p->deadline = rq->clock + user_prio2deadline[NICE_WIDTH - 1];
 }
 
 /*
@@ -224,14 +223,8 @@ static void sched_task_fork(struct task_struct *p, struct rq *rq)
  */
 int task_prio(const struct task_struct *p)
 {
-	int ret;
-
-	if (p->prio < MAX_RT_PRIO)
-		return (p->prio - MAX_RT_PRIO);
-
-	ret = task_sched_prio(p) - MIN_NORMAL_PRIO;
-
-	return ret;
+	return (p->prio < MAX_RT_PRIO) ? p->prio - MAX_RT_PRIO :
+		task_sched_prio(p) - MIN_NORMAL_PRIO;
 }
 
 static void do_sched_yield_type_1(struct task_struct *p, struct rq *rq)
-- 
2.33.1.711.g9d530dc002

