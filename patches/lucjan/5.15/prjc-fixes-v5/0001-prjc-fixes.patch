From 1a20f05c18a6d39bffefcfafea579ba51565d169 Mon Sep 17 00:00:00 2001
From: Steven Barrett <steven@liquorix.net>
Date: Thu, 25 Nov 2021 11:12:55 -0600
Subject: [PATCH 1/4] sched/alt: [Sync] 42dc938a sched/core: Mitigate race
 cpus_share_cache()/update_top_cache_domain()

---
 kernel/sched/alt_core.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 8b0ddbdd24e4..db05c9c49446 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -2449,6 +2449,9 @@ void wake_up_if_idle(int cpu)
 
 bool cpus_share_cache(int this_cpu, int that_cpu)
 {
+	if (this_cpu == that_cpu)
+		return true;
+
 	return per_cpu(sd_llc_id, this_cpu) == per_cpu(sd_llc_id, that_cpu);
 }
 #else /* !CONFIG_SMP */
-- 
2.34.1.75.gabe6bb3905


From 105227c2230249a96252e6418ef22d029dc1c425 Mon Sep 17 00:00:00 2001
From: Steven Barrett <steven@liquorix.net>
Date: Thu, 25 Nov 2021 12:54:22 -0600
Subject: [PATCH 2/4] sched/alt: [Sync] b027789e Prevent dead task groups from
 regaining cfs_rq's

---
 kernel/sched/alt_core.c | 30 ++++++++++++++++++++++--------
 1 file changed, 22 insertions(+), 8 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index db05c9c49446..743498c877da 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -7452,6 +7452,20 @@ static void sched_free_group(struct task_group *tg)
 	kmem_cache_free(task_group_cache, tg);
 }
 
+static void sched_free_group_rcu(struct rcu_head *rcu)
+{
+	sched_free_group(container_of(rcu, struct task_group, rcu));
+}
+
+static void sched_unregister_group(struct task_group *tg)
+{
+	/*
+	 * We have to wait for yet another RCU grace period to expire, as
+	 * print_cfs_stats() might run concurrently.
+	 */
+	call_rcu(&tg->rcu, sched_free_group_rcu);
+}
+
 /* allocate runqueue etc for a new task group */
 struct task_group *sched_create_group(struct task_group *parent)
 {
@@ -7469,19 +7483,19 @@ void sched_online_group(struct task_group *tg, struct task_group *parent)
 }
 
 /* rcu callback to free various structures associated with a task group */
-static void sched_free_group_rcu(struct rcu_head *rhp)
+static void sched_unregister_group_rcu(struct rcu_head *rhp)
 {
-	/* Now it should be safe to free those cfs_rqs */
-	sched_free_group(container_of(rhp, struct task_group, rcu));
+	/* Now it should be safe to free those cfs_rqs: */
+	sched_unregister_group(container_of(rhp, struct task_group, rcu));
 }
 
 void sched_destroy_group(struct task_group *tg)
 {
-	/* Wait for possible concurrent references to cfs_rqs complete */
-	call_rcu(&tg->rcu, sched_free_group_rcu);
+	/* Wait for possible concurrent references to cfs_rqs complete: */
+	call_rcu(&tg->rcu, sched_unregister_group_rcu);
 }
 
-void sched_offline_group(struct task_group *tg)
+void sched_release_group(struct task_group *tg)
 {
 }
 
@@ -7522,7 +7536,7 @@ static void cpu_cgroup_css_released(struct cgroup_subsys_state *css)
 {
 	struct task_group *tg = css_tg(css);
 
-	sched_offline_group(tg);
+	sched_release_group(tg);
 }
 
 static void cpu_cgroup_css_free(struct cgroup_subsys_state *css)
@@ -7532,7 +7546,7 @@ static void cpu_cgroup_css_free(struct cgroup_subsys_state *css)
 	/*
 	 * Relies on the RCU grace period between css_released() and this.
 	 */
-	sched_free_group(tg);
+	sched_unregister_group(tg);
 }
 
 static void cpu_cgroup_fork(struct task_struct *task)
-- 
2.34.1.75.gabe6bb3905


From cf572c6c40e026169772cd0a43cbb794711cc9e7 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Sun, 21 Nov 2021 23:58:50 +0100
Subject: [PATCH 3/4] sched/alt: Optimize loops in update_sched_rq_watermark.

With the old code, gcc misses an optimization opportunity and compiles
the loops to five instructions each:

    0x0000000000000ed3 <+83>:	lock bts %rdi,(%rax)
    0x0000000000000ed8 <+88>:	dec    %rdx
    0x0000000000000edb <+91>:	add    $0x400,%rax
    0x0000000000000ee1 <+97>:	cmp    %rdx,%rsi
    0x0000000000000ee4 <+100>:	jne    0xed3 <update_sched_rq_watermark+83>
    ...
    0x0000000000000f13 <+147>:	lock btr %rdi,(%rax)
    0x0000000000000f18 <+152>:	dec    %rdx
    0x0000000000000f1b <+155>:	add    $0x400,%rax
    0x0000000000000f21 <+161>:	cmp    %rcx,%rdx
    0x0000000000000f24 <+164>:	jne    0xf13 <update_sched_rq_watermark+147>

With this change, the loops get optimized to four instructions each:

    0x0000000000000ed7 <+87>:	lock bts %rsi,(%rdx)
    0x0000000000000edc <+92>:	add    $0x400,%rdx
    0x0000000000000ee3 <+99>:	dec    %rcx
    0x0000000000000ee6 <+102>:	jne    0xed7 <update_sched_rq_watermark+87>
    ...
    0x0000000000000f1a <+154>:	lock btr %rsi,(%rax)
    0x0000000000000f1f <+159>:	add    $0x400,%rax
    0x0000000000000f25 <+165>:	dec    %rdx
    0x0000000000000f28 <+168>:	jne    0xf1a <update_sched_rq_watermark+154>

Signed-off-by: Torge Matthies <openglfreak@googlemail.com>
---
 kernel/sched/alt_core.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 743498c877da..668c6a87e1d2 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -185,8 +185,8 @@ static inline void update_sched_rq_watermark(struct rq *rq)
 	rq->watermark = watermark;
 	cpu = cpu_of(rq);
 	if (watermark < last_wm) {
-		for (i = last_wm; i > watermark; i--)
-			cpumask_clear_cpu(cpu, sched_rq_watermark + SCHED_BITS - 1 - i);
+		for (i = last_wm - watermark; i > 0; i--)
+			cpumask_clear_cpu(cpu, sched_rq_watermark + SCHED_BITS - 1 - (i + watermark));
 #ifdef CONFIG_SCHED_SMT
 		if (static_branch_likely(&sched_smt_present) &&
 		    IDLE_TASK_SCHED_PRIO == last_wm)
@@ -196,8 +196,8 @@ static inline void update_sched_rq_watermark(struct rq *rq)
 		return;
 	}
 	/* last_wm < watermark */
-	for (i = watermark; i > last_wm; i--)
-		cpumask_set_cpu(cpu, sched_rq_watermark + SCHED_BITS - 1 - i);
+	for (i = watermark - last_wm; i > 0; i--)
+		cpumask_set_cpu(cpu, sched_rq_watermark + SCHED_BITS - 1 - (i + last_wm));
 #ifdef CONFIG_SCHED_SMT
 	if (static_branch_likely(&sched_smt_present) &&
 	    IDLE_TASK_SCHED_PRIO == watermark) {
-- 
2.34.1.75.gabe6bb3905


From 522fa979d5badb9479aa441b557c108902c5da22 Mon Sep 17 00:00:00 2001
From: Juuso Alasuutari <juuso.alasuutari@gmail.com>
Date: Sat, 16 Oct 2021 17:01:28 +0300
Subject: [PATCH 4/4] sched/alt: Alfred Chen's PoC sched_preferred_cpumask
 patch

The hard-coded cpumask value is based on torturing my R9 3950X and
arbitrarily picking the top four cores. I have no idea if the same
cores are supposed to have the highest boost in every specimen.

Also fixed a typo in the cpumask variable.

Signed-off-by: Juuso Alasuutari <juuso.alasuutari@gmail.com>
---
 arch/x86/kernel/itmt.c   |  1 +
 kernel/sched/alt_core.c  | 29 ++++++++++++++++++-----------
 kernel/sched/alt_sched.h |  4 +++-
 3 files changed, 22 insertions(+), 12 deletions(-)

diff --git a/arch/x86/kernel/itmt.c b/arch/x86/kernel/itmt.c
index 1afbdd1dd777..39786d33f63e 100644
--- a/arch/x86/kernel/itmt.c
+++ b/arch/x86/kernel/itmt.c
@@ -190,6 +190,7 @@ void sched_set_itmt_core_prio(int prio, int core_cpu)
 {
 	int cpu, i = 1;
 
+	pr_info("sched_set_itmt_core_prio: %d -- %d\n", core_cpu, prio);
 	for_each_cpu(cpu, topology_sibling_cpumask(core_cpu)) {
 		int smt_prio;
 
diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 668c6a87e1d2..c97d25b3b99c 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -120,6 +120,8 @@ DEFINE_PER_CPU(cpumask_t [NR_CPU_AFFINITY_LEVELS], sched_cpu_topo_masks);
 DEFINE_PER_CPU(cpumask_t *, sched_cpu_llc_mask);
 DEFINE_PER_CPU(cpumask_t *, sched_cpu_topo_end_mask);
 
+static cpumask_t sched_preferred_cpumask ____cacheline_aligned_in_smp;
+
 #ifdef CONFIG_SCHED_SMT
 DEFINE_STATIC_KEY_FALSE(sched_smt_present);
 EXPORT_SYMBOL_GPL(sched_smt_present);
@@ -7051,11 +7053,14 @@ static void sched_init_topology_cpumask_early(void)
 	}
 }
 
-#define TOPOLOGY_CPUMASK(name, mask, last)\
+#define TOPOLOGY_CPUMASK(name, mask, itmt, last)\
 	if (cpumask_and(topo, topo, mask)) {					\
+		if (itmt && cpumask_and(topo, topo, &sched_preferred_cpumask))	\
+			pr_info("sched: cpu#%02d topo: 0x%016lx - "#name" itmt",\
+				cpu, (topo++)->bits[0]);			\
 		cpumask_copy(topo, mask);					\
-		printk(KERN_INFO "sched: cpu#%02d topo: 0x%08lx - "#name,	\
-		       cpu, (topo++)->bits[0]);					\
+		pr_info("sched: cpu#%02d topo: 0x%016lx - "#name,		\
+			cpu, (topo++)->bits[0]);				\
 	}									\
 	if (!last)								\
 		cpumask_complement(topo, mask)
@@ -7065,6 +7070,8 @@ static void sched_init_topology_cpumask(void)
 	int cpu;
 	cpumask_t *topo;
 
+	sched_preferred_cpumask.bits[0] = 0x00600060;
+
 	for_each_online_cpu(cpu) {
 		/* take chance to reset time slice for idle tasks */
 		cpu_rq(cpu)->idle->time_slice = sched_timeslice_ns;
@@ -7073,21 +7080,21 @@ static void sched_init_topology_cpumask(void)
 
 		cpumask_complement(topo, cpumask_of(cpu));
 #ifdef CONFIG_SCHED_SMT
-		TOPOLOGY_CPUMASK(smt, topology_sibling_cpumask(cpu), false);
+		TOPOLOGY_CPUMASK(smt, topology_sibling_cpumask(cpu), false, false);
 #endif
 		per_cpu(sd_llc_id, cpu) = cpumask_first(cpu_coregroup_mask(cpu));
 		per_cpu(sched_cpu_llc_mask, cpu) = topo;
-		TOPOLOGY_CPUMASK(coregroup, cpu_coregroup_mask(cpu), false);
+		TOPOLOGY_CPUMASK(coregroup, cpu_coregroup_mask(cpu), true, false);
 
-		TOPOLOGY_CPUMASK(core, topology_core_cpumask(cpu), false);
+		TOPOLOGY_CPUMASK(core, topology_core_cpumask(cpu), true, false);
 
-		TOPOLOGY_CPUMASK(others, cpu_online_mask, true);
+		TOPOLOGY_CPUMASK(others, cpu_online_mask, true, true);
 
 		per_cpu(sched_cpu_topo_end_mask, cpu) = topo;
-		printk(KERN_INFO "sched: cpu#%02d llc_id = %d, llc_mask idx = %d\n",
-		       cpu, per_cpu(sd_llc_id, cpu),
-		       (int) (per_cpu(sched_cpu_llc_mask, cpu) -
-			      per_cpu(sched_cpu_topo_masks, cpu)));
+		pr_info("sched: cpu#%02d llc_id = %d, llc_mask idx = %d\n",
+			cpu, per_cpu(sd_llc_id, cpu),
+			(int) (per_cpu(sched_cpu_llc_mask, cpu) -
+			       per_cpu(sched_cpu_topo_masks, cpu)));
 	}
 }
 #endif
diff --git a/kernel/sched/alt_sched.h b/kernel/sched/alt_sched.h
index 289058a09bd5..02e0e1bcd762 100644
--- a/kernel/sched/alt_sched.h
+++ b/kernel/sched/alt_sched.h
@@ -301,14 +301,16 @@ enum {
 #ifdef CONFIG_SCHED_SMT
 	SMT_LEVEL_SPACE_HOLDER,
 #endif
+	COREGROUP_ITMT_LEVEL_SPACE_HOLDER,
 	COREGROUP_LEVEL_SPACE_HOLDER,
+	CORE_ITMT_LEVEL_SPACE_HOLDER,
 	CORE_LEVEL_SPACE_HOLDER,
+	OTHER_ITMT_LEVEL_SPACE_HOLDER,
 	OTHER_LEVEL_SPACE_HOLDER,
 	NR_CPU_AFFINITY_LEVELS
 };
 
 DECLARE_PER_CPU(cpumask_t [NR_CPU_AFFINITY_LEVELS], sched_cpu_topo_masks);
-DECLARE_PER_CPU(cpumask_t *, sched_cpu_llc_mask);
 
 static inline int
 __best_mask_cpu(const cpumask_t *cpumask, const cpumask_t *mask)
-- 
2.34.1.75.gabe6bb3905

