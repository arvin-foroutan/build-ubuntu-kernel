From 7383c9a324360a6e1916166d94a900d86c6b95bf Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 19 Nov 2021 11:47:04 +0100
Subject: [PATCH 30/41] Revert "btrfs: index free space entries on size"

This reverts commit 49ec5272f1c499d7fd43b1ba735bc6cf51ea07cf.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 fs/btrfs/free-space-cache.c | 84 ++++---------------------------------
 fs/btrfs/free-space-cache.h |  2 -
 2 files changed, 7 insertions(+), 79 deletions(-)

diff --git a/fs/btrfs/free-space-cache.c b/fs/btrfs/free-space-cache.c
index a43857de6..6ca3a92cd 100644
--- a/fs/btrfs/free-space-cache.c
+++ b/fs/btrfs/free-space-cache.c
@@ -1576,44 +1576,6 @@ static int tree_insert_offset(struct rb_root *root, u64 offset,
 	return 0;
 }
 
-static u64 free_space_info_bytes(struct btrfs_free_space *info)
-{
-	if (info->bitmap && info->max_extent_size)
-		return info->max_extent_size;
-	return info->bytes;
-}
-
-/*
- * This is indexed in reverse of what we generally do for rb-tree's, the largest
- * chunks are left most and the smallest are rightmost.  This is so that we can
- * take advantage of the cached property of the cached rb-tree and simply get
- * the largest free space chunk right away.
- */
-static void tree_insert_bytes(struct btrfs_free_space_ctl *ctl,
-			      struct btrfs_free_space *info)
-{
-	struct rb_root_cached *root = &ctl->free_space_bytes;
-	struct rb_node **p = &root->rb_root.rb_node;
-	struct rb_node *parent_node = NULL;
-	struct btrfs_free_space *tmp;
-	bool leftmost = true;
-
-	while (*p) {
-		parent_node = *p;
-		tmp = rb_entry(parent_node, struct btrfs_free_space,
-			       bytes_index);
-		if (free_space_info_bytes(info) < free_space_info_bytes(tmp)) {
-			p = &(*p)->rb_right;
-			leftmost = false;
-		} else {
-			p = &(*p)->rb_left;
-		}
-	}
-
-	rb_link_node(&info->bytes_index, parent_node, p);
-	rb_insert_color_cached(&info->bytes_index, root, leftmost);
-}
-
 /*
  * searches the tree for the given offset.
  *
@@ -1742,7 +1704,6 @@ __unlink_free_space(struct btrfs_free_space_ctl *ctl,
 		    struct btrfs_free_space *info)
 {
 	rb_erase(&info->offset_index, &ctl->free_space_offset);
-	rb_erase_cached(&info->bytes_index, &ctl->free_space_bytes);
 	ctl->free_extents--;
 
 	if (!info->bitmap && !btrfs_free_space_trimmed(info)) {
@@ -1769,8 +1730,6 @@ static int link_free_space(struct btrfs_free_space_ctl *ctl,
 	if (ret)
 		return ret;
 
-	tree_insert_bytes(ctl, info);
-
 	if (!info->bitmap && !btrfs_free_space_trimmed(info)) {
 		ctl->discardable_extents[BTRFS_STAT_CURR]++;
 		ctl->discardable_bytes[BTRFS_STAT_CURR] += info->bytes;
@@ -1941,7 +1900,7 @@ static inline u64 get_max_extent_size(struct btrfs_free_space *entry)
 /* Cache the size of the max extent in bytes */
 static struct btrfs_free_space *
 find_free_space(struct btrfs_free_space_ctl *ctl, u64 *offset, u64 *bytes,
-		unsigned long align, u64 *max_extent_size, bool use_bytes_index)
+		unsigned long align, u64 *max_extent_size)
 {
 	struct btrfs_free_space *entry;
 	struct rb_node *node;
@@ -1952,37 +1911,15 @@ find_free_space(struct btrfs_free_space_ctl *ctl, u64 *offset, u64 *bytes,
 	if (!ctl->free_space_offset.rb_node)
 		goto out;
 
-	if (use_bytes_index) {
-		node = rb_first_cached(&ctl->free_space_bytes);
-	} else {
-		entry = tree_search_offset(ctl, offset_to_bitmap(ctl, *offset),
-					   0, 1);
-		if (!entry)
-			goto out;
-		node = &entry->offset_index;
-	}
-
-	for (; node; node = rb_next(node)) {
-		if (use_bytes_index)
-			entry = rb_entry(node, struct btrfs_free_space,
-					 bytes_index);
-		else
-			entry = rb_entry(node, struct btrfs_free_space,
-					 offset_index);
+	entry = tree_search_offset(ctl, offset_to_bitmap(ctl, *offset), 0, 1);
+	if (!entry)
+		goto out;
 
-		/*
-		 * If we are using the bytes index then all subsequent entries
-		 * in this tree are going to be < bytes, so simply set the max
-		 * extent size and exit the loop.
-		 *
-		 * If we're using the offset index then we need to keep going
-		 * through the rest of the tree.
-		 */
+	for (node = &entry->offset_index; node; node = rb_next(node)) {
+		entry = rb_entry(node, struct btrfs_free_space, offset_index);
 		if (entry->bytes < *bytes) {
 			*max_extent_size = max(get_max_extent_size(entry),
 					       *max_extent_size);
-			if (use_bytes_index)
-				break;
 			continue;
 		}
 
@@ -2569,7 +2506,6 @@ int __btrfs_add_free_space(struct btrfs_fs_info *fs_info,
 	info->bytes = bytes;
 	info->trim_state = trim_state;
 	RB_CLEAR_NODE(&info->offset_index);
-	RB_CLEAR_NODE(&info->bytes_index);
 
 	spin_lock(&ctl->tree_lock);
 
@@ -2873,7 +2809,6 @@ void btrfs_init_free_space_ctl(struct btrfs_block_group *block_group,
 	ctl->start = block_group->start;
 	ctl->private = block_group;
 	ctl->op = &free_space_op;
-	ctl->free_space_bytes = RB_ROOT_CACHED;
 	INIT_LIST_HEAD(&ctl->trimming_ranges);
 	mutex_init(&ctl->cache_writeout_mutex);
 
@@ -2939,7 +2874,6 @@ static void __btrfs_return_cluster_to_free_space(
 		}
 		tree_insert_offset(&ctl->free_space_offset,
 				   entry->offset, &entry->offset_index, bitmap);
-		tree_insert_bytes(ctl, entry);
 	}
 	cluster->root = RB_ROOT;
 	spin_unlock(&cluster->lock);
@@ -3041,14 +2975,12 @@ u64 btrfs_find_space_for_alloc(struct btrfs_block_group *block_group,
 	u64 align_gap = 0;
 	u64 align_gap_len = 0;
 	enum btrfs_trim_state align_gap_trim_state = BTRFS_TRIM_STATE_UNTRIMMED;
-	bool use_bytes_index = (offset == block_group->start);
 
 	ASSERT(!btrfs_is_zoned(block_group->fs_info));
 
 	spin_lock(&ctl->tree_lock);
 	entry = find_free_space(ctl, &offset, &bytes_search,
-				block_group->full_stripe_len, max_extent_size,
-				use_bytes_index);
+				block_group->full_stripe_len, max_extent_size);
 	if (!entry)
 		goto out;
 
@@ -3332,7 +3264,6 @@ static int btrfs_bitmap_cluster(struct btrfs_block_group *block_group,
 
 	cluster->window_start = start * ctl->unit + entry->offset;
 	rb_erase(&entry->offset_index, &ctl->free_space_offset);
-	rb_erase_cached(&entry->bytes_index, &ctl->free_space_bytes);
 	ret = tree_insert_offset(&cluster->root, entry->offset,
 				 &entry->offset_index, 1);
 	ASSERT(!ret); /* -EEXIST; Logic error */
@@ -3423,7 +3354,6 @@ setup_cluster_no_bitmap(struct btrfs_block_group *block_group,
 			continue;
 
 		rb_erase(&entry->offset_index, &ctl->free_space_offset);
-		rb_erase_cached(&entry->bytes_index, &ctl->free_space_bytes);
 		ret = tree_insert_offset(&cluster->root, entry->offset,
 					 &entry->offset_index, 0);
 		total_size += entry->bytes;
diff --git a/fs/btrfs/free-space-cache.h b/fs/btrfs/free-space-cache.h
index dd982d204..1f23088d4 100644
--- a/fs/btrfs/free-space-cache.h
+++ b/fs/btrfs/free-space-cache.h
@@ -22,7 +22,6 @@ enum btrfs_trim_state {
 
 struct btrfs_free_space {
 	struct rb_node offset_index;
-	struct rb_node bytes_index;
 	u64 offset;
 	u64 bytes;
 	u64 max_extent_size;
@@ -46,7 +45,6 @@ static inline bool btrfs_free_space_trimming_bitmap(
 struct btrfs_free_space_ctl {
 	spinlock_t tree_lock;
 	struct rb_root free_space_offset;
-	struct rb_root_cached free_space_bytes;
 	u64 free_space;
 	int extents_thresh;
 	int free_extents;
-- 
2.34.1.75.gabe6bb3905

