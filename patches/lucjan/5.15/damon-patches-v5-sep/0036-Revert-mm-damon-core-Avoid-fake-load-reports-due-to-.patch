From 016bbda4e9c7292eaf07806f36440abd03b1ec6e Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Fri, 26 Nov 2021 15:29:46 +0100
Subject: [PATCH 36/38] Revert "mm/damon/core: Avoid fake load reports due to
 uninterruptible sleeps"

This reverts commit f8f652fd7db0d75866ede3ef0e66ca7f8e566e43.
---
 mm/damon/core.c | 21 +++------------------
 1 file changed, 3 insertions(+), 18 deletions(-)

diff --git a/mm/damon/core.c b/mm/damon/core.c
index 5831251c2..c381b3c52 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -12,8 +12,6 @@
 #include <linux/kthread.h>
 #include <linux/mm.h>
 #include <linux/random.h>
-#include <linux/sched.h>
-#include <linux/sched/debug.h>
 #include <linux/slab.h>
 #include <linux/string.h>
 
@@ -980,25 +978,12 @@ static unsigned long damos_wmark_wait_us(struct damos *scheme)
 	return 0;
 }
 
-/* sleep for @usecs in idle mode */
-static void __sched damon_usleep_idle(unsigned long usecs)
-{
-	ktime_t exp = ktime_add_us(ktime_get(), usecs);
-	u64 delta = usecs * NSEC_PER_USEC / 100;	/* allow 1% error */
-
-	for (;;) {
-		__set_current_state(TASK_IDLE);
-		if (!schedule_hrtimeout_range(&exp, delta, HRTIMER_MODE_ABS))
-			break;
-	}
-}
-
 static void kdamond_usleep(unsigned long usecs)
 {
 	if (usecs > 100 * 1000)
-		schedule_timeout_idle(usecs_to_jiffies(usecs));
+		schedule_timeout_interruptible(usecs_to_jiffies(usecs));
 	else
-		damon_usleep_idle(usecs);
+		usleep_range(usecs, usecs + 1);
 }
 
 /* Returns negative error code if it's not activated but should return */
@@ -1053,7 +1038,7 @@ static int kdamond_fn(void *data)
 				ctx->callback.after_sampling(ctx))
 			done = true;
 
-		kdamond_usleep(ctx->sample_interval);
+		usleep_range(ctx->sample_interval, ctx->sample_interval + 1);
 
 		if (ctx->primitive.check_accesses)
 			max_nr_accesses = ctx->primitive.check_accesses(ctx);
-- 
2.33.1.711.g9d530dc002

