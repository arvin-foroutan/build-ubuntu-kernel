--- ./block/bfq-iosched.c	2021-09-26 08:19:56.549723829 -0700
+++ ./block/bfq-iosched.c	2021-09-26 08:23:46.985209882 -0700
@@ -2664,10 +2664,49 @@
  */
 static struct bfq_queue *
 bfq_setup_cooperator(struct bfq_data *bfqd, struct bfq_queue *bfqq,
-		     void *io_struct, bool request)
+            void *io_struct, bool request, struct bfq_io_cq *bic)
 {
 	struct bfq_queue *in_service_bfqq, *new_bfqq;
 
+    /*
+     * Check delayed stable merge for rotational or non-queueing
+     * devs. For this branch to be executed, bfqq must not be
+     * currently merged with some other queue (i.e., bfqq->bic
+     * must be non null). If we considered also merged queues,
+     * then we should also check whether bfqq has already been
+     * merged with bic->stable_merge_bfqq. But this would be
+     * costly and complicated.
+     */
+    if (unlikely(!bfqd->nonrot_with_queueing)) {
+        if (bic->stable_merge_bfqq &&
+            !bfq_bfqq_just_created(bfqq) &&
+            time_is_after_jiffies(bfqq->split_time +
+                      msecs_to_jiffies(200))) {
+            struct bfq_queue *stable_merge_bfqq =
+                bic->stable_merge_bfqq;
+            int proc_ref = min(bfqq_process_refs(bfqq),
+                       bfqq_process_refs(stable_merge_bfqq));
+
+            /* deschedule stable merge, because done or aborted here */
+            bfq_put_stable_ref(stable_merge_bfqq);
+
+            bic->stable_merge_bfqq = NULL;
+
+            if (!idling_boosts_thr_without_issues(bfqd, bfqq) &&
+                proc_ref > 0) {
+                /* next function will take at least one ref */
+                struct bfq_queue *new_bfqq =
+                    bfq_setup_merge(bfqq, stable_merge_bfqq);
+
+                bic->stably_merged = true;
+                if (new_bfqq && new_bfqq->bic)
+                    new_bfqq->bic->stably_merged = true;
+                return new_bfqq;
+            } else
+                return NULL;
+        }
+    }
+
 	/* if a merge has already been setup, then proceed with that first */
 	if (bfqq->new_bfqq)
 		return bfqq->new_bfqq;
